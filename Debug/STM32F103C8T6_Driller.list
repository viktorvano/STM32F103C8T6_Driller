
STM32F103C8T6_Driller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002400  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800250c  0800250c  0001250c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800256c  0800256c  0001256c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002570  08002570  00012570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000009c  20000004  08002578  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000a0  08002578  000200a0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a7e3  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000018d6  00000000  00000000  0002a810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000660  00000000  00000000  0002c0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b8  00000000  00000000  0002c748  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000340c  00000000  00000000  0002cd00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000200f  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003211b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001884  00000000  00000000  00032198  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080024f4 	.word	0x080024f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080024f4 	.word	0x080024f4

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f923 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f846 	bl	80021f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <HAL_InitTick+0x30>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <HAL_InitTick+0x34>)
 8000186:	fba2 2303 	umull	r2, r3, r2, r3
 800018a:	099b      	lsrs	r3, r3, #6
 800018c:	4618      	mov	r0, r3
 800018e:	f000 f940 	bl	8000412 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000192:	2200      	movs	r2, #0
 8000194:	6879      	ldr	r1, [r7, #4]
 8000196:	f04f 30ff 	mov.w	r0, #4294967295
 800019a:	f000 f910 	bl	80003be <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800019e:	2300      	movs	r3, #0
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	20000000 	.word	0x20000000
 80001ac:	10624dd3 	.word	0x10624dd3

080001b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  uwTick++;
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <HAL_IncTick+0x18>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	3301      	adds	r3, #1
 80001ba:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x18>)
 80001bc:	6013      	str	r3, [r2, #0]
}
 80001be:	bf00      	nop
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000024 	.word	0x20000024

080001cc <HAL_GetTick>:
  * @note  This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
  return uwTick;
 80001d0:	4b02      	ldr	r3, [pc, #8]	; (80001dc <HAL_GetTick+0x10>)
 80001d2:	681b      	ldr	r3, [r3, #0]
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	20000024 	.word	0x20000024

080001e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80001e8:	f7ff fff0 	bl	80001cc <HAL_GetTick>
 80001ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001f8:	d002      	beq.n	8000200 <HAL_Delay+0x20>
  {
     wait++;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	3301      	adds	r3, #1
 80001fe:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000200:	bf00      	nop
 8000202:	f7ff ffe3 	bl	80001cc <HAL_GetTick>
 8000206:	4602      	mov	r2, r0
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	1ad2      	subs	r2, r2, r3
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	429a      	cmp	r2, r3
 8000210:	d3f7      	bcc.n	8000202 <HAL_Delay+0x22>
  {
  }
}
 8000212:	bf00      	nop
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800021c:	b480      	push	{r7}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f003 0307 	and.w	r3, r3, #7
 800022a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <NVIC_SetPriorityGrouping+0x44>)
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000232:	68ba      	ldr	r2, [r7, #8]
 8000234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000238:	4013      	ands	r3, r2
 800023a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800024c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800024e:	4a04      	ldr	r2, [pc, #16]	; (8000260 <NVIC_SetPriorityGrouping+0x44>)
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	60d3      	str	r3, [r2, #12]
}
 8000254:	bf00      	nop
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000268:	4b04      	ldr	r3, [pc, #16]	; (800027c <NVIC_GetPriorityGrouping+0x18>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	0a1b      	lsrs	r3, r3, #8
 800026e:	f003 0307 	and.w	r3, r3, #7
}
 8000272:	4618      	mov	r0, r3
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	e000ed00 	.word	0xe000ed00

08000280 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800028a:	4908      	ldr	r1, [pc, #32]	; (80002ac <NVIC_EnableIRQ+0x2c>)
 800028c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000290:	095b      	lsrs	r3, r3, #5
 8000292:	79fa      	ldrb	r2, [r7, #7]
 8000294:	f002 021f 	and.w	r2, r2, #31
 8000298:	2001      	movs	r0, #1
 800029a:	fa00 f202 	lsl.w	r2, r0, r2
 800029e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	6039      	str	r1, [r7, #0]
 80002ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	da0b      	bge.n	80002dc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	490d      	ldr	r1, [pc, #52]	; (80002fc <NVIC_SetPriority+0x4c>)
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	f003 030f 	and.w	r3, r3, #15
 80002cc:	3b04      	subs	r3, #4
 80002ce:	683a      	ldr	r2, [r7, #0]
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	0112      	lsls	r2, r2, #4
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	440b      	add	r3, r1
 80002d8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002da:	e009      	b.n	80002f0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	4908      	ldr	r1, [pc, #32]	; (8000300 <NVIC_SetPriority+0x50>)
 80002de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e2:	683a      	ldr	r2, [r7, #0]
 80002e4:	b2d2      	uxtb	r2, r2
 80002e6:	0112      	lsls	r2, r2, #4
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	440b      	add	r3, r1
 80002ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000ed00 	.word	0xe000ed00
 8000300:	e000e100 	.word	0xe000e100

08000304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000304:	b480      	push	{r7}
 8000306:	b089      	sub	sp, #36	; 0x24
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	f003 0307 	and.w	r3, r3, #7
 8000316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000318:	69fb      	ldr	r3, [r7, #28]
 800031a:	f1c3 0307 	rsb	r3, r3, #7
 800031e:	2b04      	cmp	r3, #4
 8000320:	bf28      	it	cs
 8000322:	2304      	movcs	r3, #4
 8000324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000326:	69fb      	ldr	r3, [r7, #28]
 8000328:	3304      	adds	r3, #4
 800032a:	2b06      	cmp	r3, #6
 800032c:	d902      	bls.n	8000334 <NVIC_EncodePriority+0x30>
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3b03      	subs	r3, #3
 8000332:	e000      	b.n	8000336 <NVIC_EncodePriority+0x32>
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000338:	2201      	movs	r2, #1
 800033a:	69bb      	ldr	r3, [r7, #24]
 800033c:	fa02 f303 	lsl.w	r3, r2, r3
 8000340:	1e5a      	subs	r2, r3, #1
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	401a      	ands	r2, r3
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800034a:	2101      	movs	r1, #1
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	1e59      	subs	r1, r3, #1
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3b01      	subs	r3, #1
 8000370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000374:	d301      	bcc.n	800037a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000376:	2301      	movs	r3, #1
 8000378:	e00f      	b.n	800039a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <SysTick_Config+0x40>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000382:	210f      	movs	r1, #15
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f7ff ff92 	bl	80002b0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SysTick_Config+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SysTick_Config+0x40>)
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010

080003a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff33 	bl	800021c <NVIC_SetPriorityGrouping>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d0:	f7ff ff48 	bl	8000264 <NVIC_GetPriorityGrouping>
 80003d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff92 	bl	8000304 <NVIC_EncodePriority>
 80003e0:	4602      	mov	r2, r0
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff61 	bl	80002b0 <NVIC_SetPriority>
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff3b 	bl	8000280 <NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffa2 	bl	8000364 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b04      	cmp	r3, #4
 8000438:	d106      	bne.n	8000448 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800043a:	4a09      	ldr	r2, [pc, #36]	; (8000460 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f043 0304 	orr.w	r3, r3, #4
 8000444:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000446:	e005      	b.n	8000454 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000448:	4a05      	ldr	r2, [pc, #20]	; (8000460 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f023 0304 	bic.w	r3, r3, #4
 8000452:	6013      	str	r3, [r2, #0]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	e000e010 	.word	0xe000e010

08000464 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000468:	f000 f802 	bl	8000470 <HAL_SYSTICK_Callback>
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}

08000470 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr

0800047c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000484:	2300      	movs	r3, #0
 8000486:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800048e:	2b02      	cmp	r3, #2
 8000490:	d005      	beq.n	800049e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2204      	movs	r2, #4
 8000496:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000498:	2301      	movs	r3, #1
 800049a:	73fb      	strb	r3, [r7, #15]
 800049c:	e057      	b.n	800054e <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	6812      	ldr	r2, [r2, #0]
 80004a6:	6812      	ldr	r2, [r2, #0]
 80004a8:	f022 020e 	bic.w	r2, r2, #14
 80004ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	6812      	ldr	r2, [r2, #0]
 80004b6:	6812      	ldr	r2, [r2, #0]
 80004b8:	f022 0201 	bic.w	r2, r2, #1
 80004bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80004be:	4a26      	ldr	r2, [pc, #152]	; (8000558 <HAL_DMA_Abort_IT+0xdc>)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4619      	mov	r1, r3
 80004c6:	4b25      	ldr	r3, [pc, #148]	; (800055c <HAL_DMA_Abort_IT+0xe0>)
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d02e      	beq.n	800052a <HAL_DMA_Abort_IT+0xae>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4619      	mov	r1, r3
 80004d2:	4b23      	ldr	r3, [pc, #140]	; (8000560 <HAL_DMA_Abort_IT+0xe4>)
 80004d4:	4299      	cmp	r1, r3
 80004d6:	d026      	beq.n	8000526 <HAL_DMA_Abort_IT+0xaa>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	4b21      	ldr	r3, [pc, #132]	; (8000564 <HAL_DMA_Abort_IT+0xe8>)
 80004e0:	4299      	cmp	r1, r3
 80004e2:	d01d      	beq.n	8000520 <HAL_DMA_Abort_IT+0xa4>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4619      	mov	r1, r3
 80004ea:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <HAL_DMA_Abort_IT+0xec>)
 80004ec:	4299      	cmp	r1, r3
 80004ee:	d014      	beq.n	800051a <HAL_DMA_Abort_IT+0x9e>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4619      	mov	r1, r3
 80004f6:	4b1d      	ldr	r3, [pc, #116]	; (800056c <HAL_DMA_Abort_IT+0xf0>)
 80004f8:	4299      	cmp	r1, r3
 80004fa:	d00b      	beq.n	8000514 <HAL_DMA_Abort_IT+0x98>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4619      	mov	r1, r3
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <HAL_DMA_Abort_IT+0xf4>)
 8000504:	4299      	cmp	r1, r3
 8000506:	d102      	bne.n	800050e <HAL_DMA_Abort_IT+0x92>
 8000508:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800050c:	e00e      	b.n	800052c <HAL_DMA_Abort_IT+0xb0>
 800050e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000512:	e00b      	b.n	800052c <HAL_DMA_Abort_IT+0xb0>
 8000514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000518:	e008      	b.n	800052c <HAL_DMA_Abort_IT+0xb0>
 800051a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800051e:	e005      	b.n	800052c <HAL_DMA_Abort_IT+0xb0>
 8000520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000524:	e002      	b.n	800052c <HAL_DMA_Abort_IT+0xb0>
 8000526:	2310      	movs	r3, #16
 8000528:	e000      	b.n	800052c <HAL_DMA_Abort_IT+0xb0>
 800052a:	2301      	movs	r3, #1
 800052c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2201      	movs	r2, #1
 8000532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000542:	2b00      	cmp	r3, #0
 8000544:	d003      	beq.n	800054e <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	4798      	blx	r3
    } 
  }
  return status;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40020000 	.word	0x40020000
 800055c:	40020008 	.word	0x40020008
 8000560:	4002001c 	.word	0x4002001c
 8000564:	40020030 	.word	0x40020030
 8000568:	40020044 	.word	0x40020044
 800056c:	40020058 	.word	0x40020058
 8000570:	4002006c 	.word	0x4002006c

08000574 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000574:	b480      	push	{r7}
 8000576:	b08b      	sub	sp, #44	; 0x2c
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800058a:	2300      	movs	r3, #0
 800058c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000592:	2300      	movs	r3, #0
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
 8000596:	e127      	b.n	80007e8 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000598:	2201      	movs	r2, #1
 800059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	4013      	ands	r3, r2
 80005aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80005ac:	69ba      	ldr	r2, [r7, #24]
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	f040 8116 	bne.w	80007e2 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	2b12      	cmp	r3, #18
 80005bc:	d034      	beq.n	8000628 <HAL_GPIO_Init+0xb4>
 80005be:	2b12      	cmp	r3, #18
 80005c0:	d80d      	bhi.n	80005de <HAL_GPIO_Init+0x6a>
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d02b      	beq.n	800061e <HAL_GPIO_Init+0xaa>
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d804      	bhi.n	80005d4 <HAL_GPIO_Init+0x60>
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d031      	beq.n	8000632 <HAL_GPIO_Init+0xbe>
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d01c      	beq.n	800060c <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 80005d2:	e048      	b.n	8000666 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	d043      	beq.n	8000660 <HAL_GPIO_Init+0xec>
 80005d8:	2b11      	cmp	r3, #17
 80005da:	d01b      	beq.n	8000614 <HAL_GPIO_Init+0xa0>
          break;
 80005dc:	e043      	b.n	8000666 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80005de:	4a87      	ldr	r2, [pc, #540]	; (80007fc <HAL_GPIO_Init+0x288>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d026      	beq.n	8000632 <HAL_GPIO_Init+0xbe>
 80005e4:	4a85      	ldr	r2, [pc, #532]	; (80007fc <HAL_GPIO_Init+0x288>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d806      	bhi.n	80005f8 <HAL_GPIO_Init+0x84>
 80005ea:	4a85      	ldr	r2, [pc, #532]	; (8000800 <HAL_GPIO_Init+0x28c>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d020      	beq.n	8000632 <HAL_GPIO_Init+0xbe>
 80005f0:	4a84      	ldr	r2, [pc, #528]	; (8000804 <HAL_GPIO_Init+0x290>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d01d      	beq.n	8000632 <HAL_GPIO_Init+0xbe>
          break;
 80005f6:	e036      	b.n	8000666 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80005f8:	4a83      	ldr	r2, [pc, #524]	; (8000808 <HAL_GPIO_Init+0x294>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d019      	beq.n	8000632 <HAL_GPIO_Init+0xbe>
 80005fe:	4a83      	ldr	r2, [pc, #524]	; (800080c <HAL_GPIO_Init+0x298>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d016      	beq.n	8000632 <HAL_GPIO_Init+0xbe>
 8000604:	4a82      	ldr	r2, [pc, #520]	; (8000810 <HAL_GPIO_Init+0x29c>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d013      	beq.n	8000632 <HAL_GPIO_Init+0xbe>
          break;
 800060a:	e02c      	b.n	8000666 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	623b      	str	r3, [r7, #32]
          break;
 8000612:	e028      	b.n	8000666 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	3304      	adds	r3, #4
 800061a:	623b      	str	r3, [r7, #32]
          break;
 800061c:	e023      	b.n	8000666 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	3308      	adds	r3, #8
 8000624:	623b      	str	r3, [r7, #32]
          break;
 8000626:	e01e      	b.n	8000666 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	330c      	adds	r3, #12
 800062e:	623b      	str	r3, [r7, #32]
          break;
 8000630:	e019      	b.n	8000666 <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d102      	bne.n	8000640 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800063a:	2304      	movs	r3, #4
 800063c:	623b      	str	r3, [r7, #32]
          break; 
 800063e:	e012      	b.n	8000666 <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d105      	bne.n	8000654 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000648:	2308      	movs	r3, #8
 800064a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	69fa      	ldr	r2, [r7, #28]
 8000650:	611a      	str	r2, [r3, #16]
          break; 
 8000652:	e008      	b.n	8000666 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000654:	2308      	movs	r3, #8
 8000656:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	69fa      	ldr	r2, [r7, #28]
 800065c:	615a      	str	r2, [r3, #20]
          break; 
 800065e:	e002      	b.n	8000666 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
          break;
 8000664:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000666:	69bb      	ldr	r3, [r7, #24]
 8000668:	2bff      	cmp	r3, #255	; 0xff
 800066a:	d801      	bhi.n	8000670 <HAL_GPIO_Init+0xfc>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	e001      	b.n	8000674 <HAL_GPIO_Init+0x100>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3304      	adds	r3, #4
 8000674:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	2bff      	cmp	r3, #255	; 0xff
 800067a:	d802      	bhi.n	8000682 <HAL_GPIO_Init+0x10e>
 800067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	e002      	b.n	8000688 <HAL_GPIO_Init+0x114>
 8000682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000684:	3b08      	subs	r3, #8
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	210f      	movs	r1, #15
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	43db      	mvns	r3, r3
 8000698:	401a      	ands	r2, r3
 800069a:	6a39      	ldr	r1, [r7, #32]
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	431a      	orrs	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	f000 8096 	beq.w	80007e2 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006b6:	4a57      	ldr	r2, [pc, #348]	; (8000814 <HAL_GPIO_Init+0x2a0>)
 80006b8:	4b56      	ldr	r3, [pc, #344]	; (8000814 <HAL_GPIO_Init+0x2a0>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b54      	ldr	r3, [pc, #336]	; (8000814 <HAL_GPIO_Init+0x2a0>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80006ce:	4a52      	ldr	r2, [pc, #328]	; (8000818 <HAL_GPIO_Init+0x2a4>)
 80006d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d2:	089b      	lsrs	r3, r3, #2
 80006d4:	3302      	adds	r3, #2
 80006d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006da:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006de:	f003 0303 	and.w	r3, r3, #3
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	220f      	movs	r2, #15
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43db      	mvns	r3, r3
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	4013      	ands	r3, r2
 80006f0:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a49      	ldr	r2, [pc, #292]	; (800081c <HAL_GPIO_Init+0x2a8>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d013      	beq.n	8000722 <HAL_GPIO_Init+0x1ae>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a48      	ldr	r2, [pc, #288]	; (8000820 <HAL_GPIO_Init+0x2ac>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d00d      	beq.n	800071e <HAL_GPIO_Init+0x1aa>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a47      	ldr	r2, [pc, #284]	; (8000824 <HAL_GPIO_Init+0x2b0>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d007      	beq.n	800071a <HAL_GPIO_Init+0x1a6>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a46      	ldr	r2, [pc, #280]	; (8000828 <HAL_GPIO_Init+0x2b4>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d101      	bne.n	8000716 <HAL_GPIO_Init+0x1a2>
 8000712:	2303      	movs	r3, #3
 8000714:	e006      	b.n	8000724 <HAL_GPIO_Init+0x1b0>
 8000716:	2304      	movs	r3, #4
 8000718:	e004      	b.n	8000724 <HAL_GPIO_Init+0x1b0>
 800071a:	2302      	movs	r3, #2
 800071c:	e002      	b.n	8000724 <HAL_GPIO_Init+0x1b0>
 800071e:	2301      	movs	r3, #1
 8000720:	e000      	b.n	8000724 <HAL_GPIO_Init+0x1b0>
 8000722:	2300      	movs	r3, #0
 8000724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000726:	f002 0203 	and.w	r2, r2, #3
 800072a:	0092      	lsls	r2, r2, #2
 800072c:	4093      	lsls	r3, r2
 800072e:	697a      	ldr	r2, [r7, #20]
 8000730:	4313      	orrs	r3, r2
 8000732:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000734:	4938      	ldr	r1, [pc, #224]	; (8000818 <HAL_GPIO_Init+0x2a4>)
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	089b      	lsrs	r3, r3, #2
 800073a:	3302      	adds	r3, #2
 800073c:	697a      	ldr	r2, [r7, #20]
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800074a:	2b00      	cmp	r3, #0
 800074c:	d006      	beq.n	800075c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800074e:	4937      	ldr	r1, [pc, #220]	; (800082c <HAL_GPIO_Init+0x2b8>)
 8000750:	4b36      	ldr	r3, [pc, #216]	; (800082c <HAL_GPIO_Init+0x2b8>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	4313      	orrs	r3, r2
 8000758:	600b      	str	r3, [r1, #0]
 800075a:	e006      	b.n	800076a <HAL_GPIO_Init+0x1f6>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800075c:	4933      	ldr	r1, [pc, #204]	; (800082c <HAL_GPIO_Init+0x2b8>)
 800075e:	4b33      	ldr	r3, [pc, #204]	; (800082c <HAL_GPIO_Init+0x2b8>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	43db      	mvns	r3, r3
 8000766:	4013      	ands	r3, r2
 8000768:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d006      	beq.n	8000784 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000776:	492d      	ldr	r1, [pc, #180]	; (800082c <HAL_GPIO_Init+0x2b8>)
 8000778:	4b2c      	ldr	r3, [pc, #176]	; (800082c <HAL_GPIO_Init+0x2b8>)
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	4313      	orrs	r3, r2
 8000780:	604b      	str	r3, [r1, #4]
 8000782:	e006      	b.n	8000792 <HAL_GPIO_Init+0x21e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000784:	4929      	ldr	r1, [pc, #164]	; (800082c <HAL_GPIO_Init+0x2b8>)
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <HAL_GPIO_Init+0x2b8>)
 8000788:	685a      	ldr	r2, [r3, #4]
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	43db      	mvns	r3, r3
 800078e:	4013      	ands	r3, r2
 8000790:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d006      	beq.n	80007ac <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800079e:	4923      	ldr	r1, [pc, #140]	; (800082c <HAL_GPIO_Init+0x2b8>)
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <HAL_GPIO_Init+0x2b8>)
 80007a2:	689a      	ldr	r2, [r3, #8]
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	608b      	str	r3, [r1, #8]
 80007aa:	e006      	b.n	80007ba <HAL_GPIO_Init+0x246>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80007ac:	491f      	ldr	r1, [pc, #124]	; (800082c <HAL_GPIO_Init+0x2b8>)
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <HAL_GPIO_Init+0x2b8>)
 80007b0:	689a      	ldr	r2, [r3, #8]
 80007b2:	69bb      	ldr	r3, [r7, #24]
 80007b4:	43db      	mvns	r3, r3
 80007b6:	4013      	ands	r3, r2
 80007b8:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80007c6:	4919      	ldr	r1, [pc, #100]	; (800082c <HAL_GPIO_Init+0x2b8>)
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <HAL_GPIO_Init+0x2b8>)
 80007ca:	68da      	ldr	r2, [r3, #12]
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	60cb      	str	r3, [r1, #12]
 80007d2:	e006      	b.n	80007e2 <HAL_GPIO_Init+0x26e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80007d4:	4915      	ldr	r1, [pc, #84]	; (800082c <HAL_GPIO_Init+0x2b8>)
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_GPIO_Init+0x2b8>)
 80007d8:	68da      	ldr	r2, [r3, #12]
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	43db      	mvns	r3, r3
 80007de:	4013      	ands	r3, r2
 80007e0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	3301      	adds	r3, #1
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
 80007e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ea:	2b0f      	cmp	r3, #15
 80007ec:	f67f aed4 	bls.w	8000598 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80007f0:	bf00      	nop
 80007f2:	372c      	adds	r7, #44	; 0x2c
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	10210000 	.word	0x10210000
 8000800:	10110000 	.word	0x10110000
 8000804:	10120000 	.word	0x10120000
 8000808:	10310000 	.word	0x10310000
 800080c:	10320000 	.word	0x10320000
 8000810:	10220000 	.word	0x10220000
 8000814:	40021000 	.word	0x40021000
 8000818:	40010000 	.word	0x40010000
 800081c:	40010800 	.word	0x40010800
 8000820:	40010c00 	.word	0x40010c00
 8000824:	40011000 	.word	0x40011000
 8000828:	40011400 	.word	0x40011400
 800082c:	40010400 	.word	0x40010400

08000830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	4013      	ands	r3, r2
 8000844:	2b00      	cmp	r3, #0
 8000846:	d002      	beq.n	800084e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000848:	2301      	movs	r3, #1
 800084a:	73fb      	strb	r3, [r7, #15]
 800084c:	e001      	b.n	8000852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000852:	7bfb      	ldrb	r3, [r7, #15]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	460b      	mov	r3, r1
 8000868:	807b      	strh	r3, [r7, #2]
 800086a:	4613      	mov	r3, r2
 800086c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800086e:	787b      	ldrb	r3, [r7, #1]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d003      	beq.n	800087c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000874:	887a      	ldrh	r2, [r7, #2]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800087a:	e003      	b.n	8000884 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800087c:	887b      	ldrh	r3, [r7, #2]
 800087e:	041a      	lsls	r2, r3, #16
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	611a      	str	r2, [r3, #16]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
	...

08000890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	f000 8087 	beq.w	80009b8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008aa:	4b92      	ldr	r3, [pc, #584]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f003 030c 	and.w	r3, r3, #12
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	d00c      	beq.n	80008d0 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008b6:	4b8f      	ldr	r3, [pc, #572]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	f003 030c 	and.w	r3, r3, #12
 80008be:	2b08      	cmp	r3, #8
 80008c0:	d112      	bne.n	80008e8 <HAL_RCC_OscConfig+0x58>
 80008c2:	4b8c      	ldr	r3, [pc, #560]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ce:	d10b      	bne.n	80008e8 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008d0:	4b88      	ldr	r3, [pc, #544]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d06c      	beq.n	80009b6 <HAL_RCC_OscConfig+0x126>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d168      	bne.n	80009b6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e22d      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008f0:	d106      	bne.n	8000900 <HAL_RCC_OscConfig+0x70>
 80008f2:	4a80      	ldr	r2, [pc, #512]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 80008f4:	4b7f      	ldr	r3, [pc, #508]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008fc:	6013      	str	r3, [r2, #0]
 80008fe:	e02e      	b.n	800095e <HAL_RCC_OscConfig+0xce>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d10c      	bne.n	8000922 <HAL_RCC_OscConfig+0x92>
 8000908:	4a7a      	ldr	r2, [pc, #488]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 800090a:	4b7a      	ldr	r3, [pc, #488]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4a77      	ldr	r2, [pc, #476]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 8000916:	4b77      	ldr	r3, [pc, #476]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	e01d      	b.n	800095e <HAL_RCC_OscConfig+0xce>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800092a:	d10c      	bne.n	8000946 <HAL_RCC_OscConfig+0xb6>
 800092c:	4a71      	ldr	r2, [pc, #452]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 800092e:	4b71      	ldr	r3, [pc, #452]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	4a6e      	ldr	r2, [pc, #440]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 800093a:	4b6e      	ldr	r3, [pc, #440]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e00b      	b.n	800095e <HAL_RCC_OscConfig+0xce>
 8000946:	4a6b      	ldr	r2, [pc, #428]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 8000948:	4b6a      	ldr	r3, [pc, #424]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	4a68      	ldr	r2, [pc, #416]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 8000954:	4b67      	ldr	r3, [pc, #412]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800095c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d013      	beq.n	800098e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000966:	f7ff fc31 	bl	80001cc <HAL_GetTick>
 800096a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096c:	e008      	b.n	8000980 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800096e:	f7ff fc2d 	bl	80001cc <HAL_GetTick>
 8000972:	4602      	mov	r2, r0
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	2b64      	cmp	r3, #100	; 0x64
 800097a:	d901      	bls.n	8000980 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 800097c:	2303      	movs	r3, #3
 800097e:	e1e1      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000980:	4b5c      	ldr	r3, [pc, #368]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0f0      	beq.n	800096e <HAL_RCC_OscConfig+0xde>
 800098c:	e014      	b.n	80009b8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800098e:	f7ff fc1d 	bl	80001cc <HAL_GetTick>
 8000992:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000994:	e008      	b.n	80009a8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000996:	f7ff fc19 	bl	80001cc <HAL_GetTick>
 800099a:	4602      	mov	r2, r0
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	2b64      	cmp	r3, #100	; 0x64
 80009a2:	d901      	bls.n	80009a8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80009a4:	2303      	movs	r3, #3
 80009a6:	e1cd      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009a8:	4b52      	ldr	r3, [pc, #328]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1f0      	bne.n	8000996 <HAL_RCC_OscConfig+0x106>
 80009b4:	e000      	b.n	80009b8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d063      	beq.n	8000a8c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009c4:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 030c 	and.w	r3, r3, #12
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00b      	beq.n	80009e8 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009d0:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 030c 	and.w	r3, r3, #12
 80009d8:	2b08      	cmp	r3, #8
 80009da:	d11c      	bne.n	8000a16 <HAL_RCC_OscConfig+0x186>
 80009dc:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d116      	bne.n	8000a16 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009e8:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f003 0302 	and.w	r3, r3, #2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d005      	beq.n	8000a00 <HAL_RCC_OscConfig+0x170>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d001      	beq.n	8000a00 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e1a1      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a00:	493c      	ldr	r1, [pc, #240]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 8000a02:	4b3c      	ldr	r3, [pc, #240]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	00db      	lsls	r3, r3, #3
 8000a10:	4313      	orrs	r3, r2
 8000a12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a14:	e03a      	b.n	8000a8c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	691b      	ldr	r3, [r3, #16]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d020      	beq.n	8000a60 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a1e:	4b36      	ldr	r3, [pc, #216]	; (8000af8 <HAL_RCC_OscConfig+0x268>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a24:	f7ff fbd2 	bl	80001cc <HAL_GetTick>
 8000a28:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a2a:	e008      	b.n	8000a3e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a2c:	f7ff fbce 	bl	80001cc <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d901      	bls.n	8000a3e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	e182      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0f0      	beq.n	8000a2c <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a4a:	492a      	ldr	r1, [pc, #168]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	600b      	str	r3, [r1, #0]
 8000a5e:	e015      	b.n	8000a8c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <HAL_RCC_OscConfig+0x268>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a66:	f7ff fbb1 	bl	80001cc <HAL_GetTick>
 8000a6a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a6c:	e008      	b.n	8000a80 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a6e:	f7ff fbad 	bl	80001cc <HAL_GetTick>
 8000a72:	4602      	mov	r2, r0
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d901      	bls.n	8000a80 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e161      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1f0      	bne.n	8000a6e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f003 0308 	and.w	r3, r3, #8
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d039      	beq.n	8000b0c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d019      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_RCC_OscConfig+0x26c>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aa6:	f7ff fb91 	bl	80001cc <HAL_GetTick>
 8000aaa:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aac:	e008      	b.n	8000ac0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aae:	f7ff fb8d 	bl	80001cc <HAL_GetTick>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d901      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000abc:	2303      	movs	r3, #3
 8000abe:	e141      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_RCC_OscConfig+0x264>)
 8000ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d0f0      	beq.n	8000aae <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f000 facb 	bl	8001068 <RCC_Delay>
 8000ad2:	e01b      	b.n	8000b0c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_RCC_OscConfig+0x26c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ada:	f7ff fb77 	bl	80001cc <HAL_GetTick>
 8000ade:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ae0:	e00e      	b.n	8000b00 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ae2:	f7ff fb73 	bl	80001cc <HAL_GetTick>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d907      	bls.n	8000b00 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000af0:	2303      	movs	r3, #3
 8000af2:	e127      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
 8000af4:	40021000 	.word	0x40021000
 8000af8:	42420000 	.word	0x42420000
 8000afc:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b00:	4b92      	ldr	r3, [pc, #584]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1ea      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 80a6 	beq.w	8000c66 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b1e:	4b8b      	ldr	r3, [pc, #556]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d10d      	bne.n	8000b46 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4a88      	ldr	r2, [pc, #544]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000b2c:	4b87      	ldr	r3, [pc, #540]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b85      	ldr	r3, [pc, #532]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000b42:	2301      	movs	r3, #1
 8000b44:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b46:	4b82      	ldr	r3, [pc, #520]	; (8000d50 <HAL_RCC_OscConfig+0x4c0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d118      	bne.n	8000b84 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b52:	4a7f      	ldr	r2, [pc, #508]	; (8000d50 <HAL_RCC_OscConfig+0x4c0>)
 8000b54:	4b7e      	ldr	r3, [pc, #504]	; (8000d50 <HAL_RCC_OscConfig+0x4c0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b5e:	f7ff fb35 	bl	80001cc <HAL_GetTick>
 8000b62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b64:	e008      	b.n	8000b78 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b66:	f7ff fb31 	bl	80001cc <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	2b64      	cmp	r3, #100	; 0x64
 8000b72:	d901      	bls.n	8000b78 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000b74:	2303      	movs	r3, #3
 8000b76:	e0e5      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b78:	4b75      	ldr	r3, [pc, #468]	; (8000d50 <HAL_RCC_OscConfig+0x4c0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d0f0      	beq.n	8000b66 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d106      	bne.n	8000b9a <HAL_RCC_OscConfig+0x30a>
 8000b8c:	4a6f      	ldr	r2, [pc, #444]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000b8e:	4b6f      	ldr	r3, [pc, #444]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000b90:	6a1b      	ldr	r3, [r3, #32]
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6213      	str	r3, [r2, #32]
 8000b98:	e02d      	b.n	8000bf6 <HAL_RCC_OscConfig+0x366>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10c      	bne.n	8000bbc <HAL_RCC_OscConfig+0x32c>
 8000ba2:	4a6a      	ldr	r2, [pc, #424]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000ba4:	4b69      	ldr	r3, [pc, #420]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000ba6:	6a1b      	ldr	r3, [r3, #32]
 8000ba8:	f023 0301 	bic.w	r3, r3, #1
 8000bac:	6213      	str	r3, [r2, #32]
 8000bae:	4a67      	ldr	r2, [pc, #412]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000bb0:	4b66      	ldr	r3, [pc, #408]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000bb2:	6a1b      	ldr	r3, [r3, #32]
 8000bb4:	f023 0304 	bic.w	r3, r3, #4
 8000bb8:	6213      	str	r3, [r2, #32]
 8000bba:	e01c      	b.n	8000bf6 <HAL_RCC_OscConfig+0x366>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	2b05      	cmp	r3, #5
 8000bc2:	d10c      	bne.n	8000bde <HAL_RCC_OscConfig+0x34e>
 8000bc4:	4a61      	ldr	r2, [pc, #388]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000bc6:	4b61      	ldr	r3, [pc, #388]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	6213      	str	r3, [r2, #32]
 8000bd0:	4a5e      	ldr	r2, [pc, #376]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000bd2:	4b5e      	ldr	r3, [pc, #376]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000bd4:	6a1b      	ldr	r3, [r3, #32]
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6213      	str	r3, [r2, #32]
 8000bdc:	e00b      	b.n	8000bf6 <HAL_RCC_OscConfig+0x366>
 8000bde:	4a5b      	ldr	r2, [pc, #364]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000be0:	4b5a      	ldr	r3, [pc, #360]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000be2:	6a1b      	ldr	r3, [r3, #32]
 8000be4:	f023 0301 	bic.w	r3, r3, #1
 8000be8:	6213      	str	r3, [r2, #32]
 8000bea:	4a58      	ldr	r2, [pc, #352]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000bec:	4b57      	ldr	r3, [pc, #348]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000bee:	6a1b      	ldr	r3, [r3, #32]
 8000bf0:	f023 0304 	bic.w	r3, r3, #4
 8000bf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d015      	beq.n	8000c2a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bfe:	f7ff fae5 	bl	80001cc <HAL_GetTick>
 8000c02:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c04:	e00a      	b.n	8000c1c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c06:	f7ff fae1 	bl	80001cc <HAL_GetTick>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d901      	bls.n	8000c1c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e093      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c1c:	4b4b      	ldr	r3, [pc, #300]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000c1e:	6a1b      	ldr	r3, [r3, #32]
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0ee      	beq.n	8000c06 <HAL_RCC_OscConfig+0x376>
 8000c28:	e014      	b.n	8000c54 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c2a:	f7ff facf 	bl	80001cc <HAL_GetTick>
 8000c2e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c30:	e00a      	b.n	8000c48 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c32:	f7ff facb 	bl	80001cc <HAL_GetTick>
 8000c36:	4602      	mov	r2, r0
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d901      	bls.n	8000c48 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000c44:	2303      	movs	r3, #3
 8000c46:	e07d      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c48:	4b40      	ldr	r3, [pc, #256]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000c4a:	6a1b      	ldr	r3, [r3, #32]
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1ee      	bne.n	8000c32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d105      	bne.n	8000c66 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c5a:	4a3c      	ldr	r2, [pc, #240]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000c5c:	4b3b      	ldr	r3, [pc, #236]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000c5e:	69db      	ldr	r3, [r3, #28]
 8000c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d069      	beq.n	8000d42 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c6e:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 030c 	and.w	r3, r3, #12
 8000c76:	2b08      	cmp	r3, #8
 8000c78:	d061      	beq.n	8000d3e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d146      	bne.n	8000d10 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c82:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <HAL_RCC_OscConfig+0x4c4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff faa0 	bl	80001cc <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c90:	f7ff fa9c 	bl	80001cc <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e050      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ca2:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f0      	bne.n	8000c90 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a1b      	ldr	r3, [r3, #32]
 8000cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb6:	d108      	bne.n	8000cca <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cb8:	4924      	ldr	r1, [pc, #144]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cca:	4820      	ldr	r0, [pc, #128]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a19      	ldr	r1, [r3, #32]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cdc:	430b      	orrs	r3, r1
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_RCC_OscConfig+0x4c4>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fa70 	bl	80001cc <HAL_GetTick>
 8000cec:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cee:	e008      	b.n	8000d02 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cf0:	f7ff fa6c 	bl	80001cc <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d901      	bls.n	8000d02 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e020      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0f0      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x460>
 8000d0e:	e018      	b.n	8000d42 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_RCC_OscConfig+0x4c4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d16:	f7ff fa59 	bl	80001cc <HAL_GetTick>
 8000d1a:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d1c:	e008      	b.n	8000d30 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d1e:	f7ff fa55 	bl	80001cc <HAL_GetTick>
 8000d22:	4602      	mov	r2, r0
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d901      	bls.n	8000d30 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e009      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_RCC_OscConfig+0x4bc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f0      	bne.n	8000d1e <HAL_RCC_OscConfig+0x48e>
 8000d3c:	e001      	b.n	8000d42 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40007000 	.word	0x40007000
 8000d54:	42420060 	.word	0x42420060

08000d58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d66:	4b72      	ldr	r3, [pc, #456]	; (8000f30 <HAL_RCC_ClockConfig+0x1d8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0207 	and.w	r2, r3, #7
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d210      	bcs.n	8000d96 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d74:	496e      	ldr	r1, [pc, #440]	; (8000f30 <HAL_RCC_ClockConfig+0x1d8>)
 8000d76:	4b6e      	ldr	r3, [pc, #440]	; (8000f30 <HAL_RCC_ClockConfig+0x1d8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f023 0207 	bic.w	r2, r3, #7
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d84:	4b6a      	ldr	r3, [pc, #424]	; (8000f30 <HAL_RCC_ClockConfig+0x1d8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0207 	and.w	r2, r3, #7
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d001      	beq.n	8000d96 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e0c8      	b.n	8000f28 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d008      	beq.n	8000db4 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000da2:	4964      	ldr	r1, [pc, #400]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000da4:	4b63      	ldr	r3, [pc, #396]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d06a      	beq.n	8000e96 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d107      	bne.n	8000dd8 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc8:	4b5a      	ldr	r3, [pc, #360]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d115      	bne.n	8000e00 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e0a7      	b.n	8000f28 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d107      	bne.n	8000df0 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000de0:	4b54      	ldr	r3, [pc, #336]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e09b      	b.n	8000f28 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df0:	4b50      	ldr	r3, [pc, #320]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e093      	b.n	8000f28 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e00:	494c      	ldr	r1, [pc, #304]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000e02:	4b4c      	ldr	r3, [pc, #304]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f023 0203 	bic.w	r2, r3, #3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e12:	f7ff f9db 	bl	80001cc <HAL_GetTick>
 8000e16:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d112      	bne.n	8000e46 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e20:	e00a      	b.n	8000e38 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e22:	f7ff f9d3 	bl	80001cc <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d901      	bls.n	8000e38 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e077      	b.n	8000f28 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e38:	4b3e      	ldr	r3, [pc, #248]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 030c 	and.w	r3, r3, #12
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d1ee      	bne.n	8000e22 <HAL_RCC_ClockConfig+0xca>
 8000e44:	e027      	b.n	8000e96 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d11d      	bne.n	8000e8a <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e4e:	e00a      	b.n	8000e66 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e50:	f7ff f9bc 	bl	80001cc <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e060      	b.n	8000f28 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e66:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 030c 	and.w	r3, r3, #12
 8000e6e:	2b08      	cmp	r3, #8
 8000e70:	d1ee      	bne.n	8000e50 <HAL_RCC_ClockConfig+0xf8>
 8000e72:	e010      	b.n	8000e96 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e74:	f7ff f9aa 	bl	80001cc <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e04e      	b.n	8000f28 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1ee      	bne.n	8000e74 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <HAL_RCC_ClockConfig+0x1d8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0207 	and.w	r2, r3, #7
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d910      	bls.n	8000ec6 <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ea4:	4922      	ldr	r1, [pc, #136]	; (8000f30 <HAL_RCC_ClockConfig+0x1d8>)
 8000ea6:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <HAL_RCC_ClockConfig+0x1d8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f023 0207 	bic.w	r2, r3, #7
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_RCC_ClockConfig+0x1d8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0207 	and.w	r2, r3, #7
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d001      	beq.n	8000ec6 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e030      	b.n	8000f28 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d008      	beq.n	8000ee4 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ed2:	4918      	ldr	r1, [pc, #96]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d009      	beq.n	8000f04 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ef0:	4910      	ldr	r1, [pc, #64]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f04:	f000 f81c 	bl	8000f40 <HAL_RCC_GetSysClockFreq>
 8000f08:	4601      	mov	r1, r0
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_RCC_ClockConfig+0x1dc>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	f003 030f 	and.w	r3, r3, #15
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <HAL_RCC_ClockConfig+0x1e0>)
 8000f16:	5cd3      	ldrb	r3, [r2, r3]
 8000f18:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_RCC_ClockConfig+0x1e4>)
 8000f1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff f929 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40022000 	.word	0x40022000
 8000f34:	40021000 	.word	0x40021000
 8000f38:	08002554 	.word	0x08002554
 8000f3c:	20000000 	.word	0x20000000

08000f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f40:	b490      	push	{r4, r7}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f46:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f48:	1d3c      	adds	r4, r7, #4
 8000f4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d002      	beq.n	8000f80 <HAL_RCC_GetSysClockFreq+0x40>
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	d003      	beq.n	8000f86 <HAL_RCC_GetSysClockFreq+0x46>
 8000f7e:	e02d      	b.n	8000fdc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f82:	623b      	str	r3, [r7, #32]
      break;
 8000f84:	e02d      	b.n	8000fe2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	0c9b      	lsrs	r3, r3, #18
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f92:	4413      	add	r3, r2
 8000f94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f98:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d013      	beq.n	8000fcc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	0c5b      	lsrs	r3, r3, #17
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fb2:	4413      	add	r3, r2
 8000fb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000fb8:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	fb02 f303 	mul.w	r3, r2, r3
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fca:	e004      	b.n	8000fd6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	623b      	str	r3, [r7, #32]
      break;
 8000fda:	e002      	b.n	8000fe2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fde:	623b      	str	r3, [r7, #32]
      break;
 8000fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc90      	pop	{r4, r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	0800250c 	.word	0x0800250c
 8000ff4:	0800251c 	.word	0x0800251c
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	007a1200 	.word	0x007a1200
 8001000:	003d0900 	.word	0x003d0900

08001004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001008:	4b02      	ldr	r3, [pc, #8]	; (8001014 <HAL_RCC_GetHCLKFreq+0x10>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	20000000 	.word	0x20000000

08001018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800101c:	f7ff fff2 	bl	8001004 <HAL_RCC_GetHCLKFreq>
 8001020:	4601      	mov	r1, r0
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	0a1b      	lsrs	r3, r3, #8
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	4a03      	ldr	r2, [pc, #12]	; (800103c <HAL_RCC_GetPCLK1Freq+0x24>)
 800102e:	5cd3      	ldrb	r3, [r2, r3]
 8001030:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001034:	4618      	mov	r0, r3
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	08002564 	.word	0x08002564

08001040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001044:	f7ff ffde 	bl	8001004 <HAL_RCC_GetHCLKFreq>
 8001048:	4601      	mov	r1, r0
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	0adb      	lsrs	r3, r3, #11
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	4a03      	ldr	r2, [pc, #12]	; (8001064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001056:	5cd3      	ldrb	r3, [r2, r3]
 8001058:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800105c:	4618      	mov	r0, r3
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	08002564 	.word	0x08002564

08001068 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <RCC_Delay+0x34>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <RCC_Delay+0x38>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	0a5b      	lsrs	r3, r3, #9
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001084:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	1e5a      	subs	r2, r3, #1
 800108a:	60fa      	str	r2, [r7, #12]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1f9      	bne.n	8001084 <RCC_Delay+0x1c>
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000000 	.word	0x20000000
 80010a0:	10624dd3 	.word	0x10624dd3

080010a4 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e03f      	b.n	8001136 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d106      	bne.n	80010d0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f001 f8e4 	bl	8002298 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2224      	movs	r2, #36	; 0x24
 80010d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	68d2      	ldr	r2, [r2, #12]
 80010e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010e6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 fb4f 	bl	800178c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6812      	ldr	r2, [r2, #0]
 80010f6:	6912      	ldr	r2, [r2, #16]
 80010f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80010fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	6952      	ldr	r2, [r2, #20]
 8001108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800110c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	68d2      	ldr	r2, [r2, #12]
 8001118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800111c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2220      	movs	r2, #32
 8001128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2220      	movs	r2, #32
 8001130:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b088      	sub	sp, #32
 8001142:	af02      	add	r7, sp, #8
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	4613      	mov	r3, r2
 800114c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b20      	cmp	r3, #32
 800115c:	f040 8090 	bne.w	8001280 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <HAL_UART_Receive+0x2e>
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e088      	b.n	8001282 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <HAL_UART_Receive+0x40>
 800117a:	2302      	movs	r3, #2
 800117c:	e081      	b.n	8001282 <HAL_UART_Receive+0x144>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2222      	movs	r2, #34	; 0x22
 8001190:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001194:	f7ff f81a 	bl	80001cc <HAL_GetTick>
 8001198:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	88fa      	ldrh	r2, [r7, #6]
 800119e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	88fa      	ldrh	r2, [r7, #6]
 80011a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 80011a6:	e05c      	b.n	8001262 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	3b01      	subs	r3, #1
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011be:	d12b      	bne.n	8001218 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2200      	movs	r2, #0
 80011c8:	2120      	movs	r1, #32
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f000 f975 	bl	80014ba <UART_WaitOnFlagUntilTimeout>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e053      	b.n	8001282 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10c      	bne.n	8001200 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	3302      	adds	r3, #2
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	e030      	b.n	8001262 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	b29b      	uxth	r3, r3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	b29a      	uxth	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	3301      	adds	r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	e024      	b.n	8001262 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	2200      	movs	r2, #0
 8001220:	2120      	movs	r1, #32
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f949 	bl	80014ba <UART_WaitOnFlagUntilTimeout>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e027      	b.n	8001282 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d108      	bne.n	800124c <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	60ba      	str	r2, [r7, #8]
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	6852      	ldr	r2, [r2, #4]
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	701a      	strb	r2, [r3, #0]
 800124a:	e00a      	b.n	8001262 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	6852      	ldr	r2, [r2, #4]
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001266:	b29b      	uxth	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d19d      	bne.n	80011a8 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2220      	movs	r2, #32
 8001270:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	e000      	b.n	8001282 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001280:	2302      	movs	r3, #2
  }
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10d      	bne.n	80012de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	f003 0320 	and.w	r3, r3, #32
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <HAL_UART_IRQHandler+0x52>
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f9d6 	bl	8001688 <UART_Receive_IT>
      return;
 80012dc:	e0cc      	b.n	8001478 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 80ab 	beq.w	800143c <HAL_UART_IRQHandler+0x1b0>
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d105      	bne.n	80012fc <HAL_UART_IRQHandler+0x70>
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 80a0 	beq.w	800143c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00a      	beq.n	800131c <HAL_UART_IRQHandler+0x90>
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001314:	f043 0201 	orr.w	r2, r3, #1
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00a      	beq.n	800133c <HAL_UART_IRQHandler+0xb0>
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001334:	f043 0202 	orr.w	r2, r3, #2
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00a      	beq.n	800135c <HAL_UART_IRQHandler+0xd0>
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001354:	f043 0204 	orr.w	r2, r3, #4
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00a      	beq.n	800137c <HAL_UART_IRQHandler+0xf0>
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001374:	f043 0208 	orr.w	r2, r3, #8
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001380:	2b00      	cmp	r3, #0
 8001382:	d078      	beq.n	8001476 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0320 	and.w	r3, r3, #32
 800138a:	2b00      	cmp	r3, #0
 800138c:	d007      	beq.n	800139e <HAL_UART_IRQHandler+0x112>
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f975 	bl	8001688 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf14      	ite	ne
 80013ac:	2301      	movne	r3, #1
 80013ae:	2300      	moveq	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <HAL_UART_IRQHandler+0x13a>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d031      	beq.n	800142a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f8c1 	bl	800154e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d023      	beq.n	8001422 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	6952      	ldr	r2, [r2, #20]
 80013e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d013      	beq.n	800141a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f6:	4a22      	ldr	r2, [pc, #136]	; (8001480 <HAL_UART_IRQHandler+0x1f4>)
 80013f8:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f83c 	bl	800047c <HAL_DMA_Abort_IT>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d016      	beq.n	8001438 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001414:	4610      	mov	r0, r2
 8001416:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001418:	e00e      	b.n	8001438 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f844 	bl	80014a8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001420:	e00a      	b.n	8001438 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f840 	bl	80014a8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001428:	e006      	b.n	8001438 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f83c 	bl	80014a8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001436:	e01e      	b.n	8001476 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001438:	bf00      	nop
    return;
 800143a:	e01c      	b.n	8001476 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001442:	2b00      	cmp	r3, #0
 8001444:	d008      	beq.n	8001458 <HAL_UART_IRQHandler+0x1cc>
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f8ad 	bl	80015b0 <UART_Transmit_IT>
    return;
 8001456:	e00f      	b.n	8001478 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00a      	beq.n	8001478 <HAL_UART_IRQHandler+0x1ec>
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f8f3 	bl	8001658 <UART_EndTransmit_IT>
    return;
 8001472:	bf00      	nop
 8001474:	e000      	b.n	8001478 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001476:	bf00      	nop
  }
}
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	08001589 	.word	0x08001589

08001484 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	4613      	mov	r3, r2
 80014c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80014ca:	e02c      	b.n	8001526 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d2:	d028      	beq.n	8001526 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <UART_WaitOnFlagUntilTimeout+0x30>
 80014da:	f7fe fe77 	bl	80001cc <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	1ad2      	subs	r2, r2, r3
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d91d      	bls.n	8001526 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	68d2      	ldr	r2, [r2, #12]
 80014f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80014f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	6952      	ldr	r2, [r2, #20]
 8001504:	f022 0201 	bic.w	r2, r2, #1
 8001508:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2220      	movs	r2, #32
 800150e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2220      	movs	r2, #32
 8001516:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e00f      	b.n	8001546 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	429a      	cmp	r2, r3
 8001534:	bf0c      	ite	eq
 8001536:	2301      	moveq	r3, #1
 8001538:	2300      	movne	r3, #0
 800153a:	b2db      	uxtb	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	429a      	cmp	r2, r3
 8001542:	d0c3      	beq.n	80014cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	68d2      	ldr	r2, [r2, #12]
 8001560:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001564:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	6952      	ldr	r2, [r2, #20]
 8001570:	f022 0201 	bic.w	r2, r2, #1
 8001574:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2220      	movs	r2, #32
 800157a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f7ff ff80 	bl	80014a8 <HAL_UART_ErrorCallback>
}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b21      	cmp	r3, #33	; 0x21
 80015c2:	d143      	bne.n	800164c <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015cc:	d119      	bne.n	8001602 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	8812      	ldrh	r2, [r2, #0]
 80015dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015e0:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d105      	bne.n	80015f6 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	1c9a      	adds	r2, r3, #2
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	621a      	str	r2, [r3, #32]
 80015f4:	e00e      	b.n	8001614 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	621a      	str	r2, [r3, #32]
 8001600:	e008      	b.n	8001614 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	1c58      	adds	r0, r3, #1
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	6208      	str	r0, [r1, #32]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001618:	b29b      	uxth	r3, r3
 800161a:	3b01      	subs	r3, #1
 800161c:	b29b      	uxth	r3, r3
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	4619      	mov	r1, r3
 8001622:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10f      	bne.n	8001648 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	68d2      	ldr	r2, [r2, #12]
 8001632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001636:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	68d2      	ldr	r2, [r2, #12]
 8001642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001646:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	e000      	b.n	800164e <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800164c:	2302      	movs	r3, #2
  }
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	68d2      	ldr	r2, [r2, #12]
 800166a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800166e:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2220      	movs	r2, #32
 8001674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff03 	bl	8001484 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b22      	cmp	r3, #34	; 0x22
 800169a:	d171      	bne.n	8001780 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016a4:	d123      	bne.n	80016ee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10e      	bne.n	80016d2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	1c9a      	adds	r2, r3, #2
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
 80016d0:	e029      	b.n	8001726 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
 80016ec:	e01b      	b.n	8001726 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10a      	bne.n	800170c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	1c59      	adds	r1, r3, #1
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6291      	str	r1, [r2, #40]	; 0x28
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	6852      	ldr	r2, [r2, #4]
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]
 800170a:	e00c      	b.n	8001726 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	1c59      	adds	r1, r3, #1
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6291      	str	r1, [r2, #40]	; 0x28
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	6852      	ldr	r2, [r2, #4]
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800172a:	b29b      	uxth	r3, r3
 800172c:	3b01      	subs	r3, #1
 800172e:	b29b      	uxth	r3, r3
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	4619      	mov	r1, r3
 8001734:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001736:	2b00      	cmp	r3, #0
 8001738:	d120      	bne.n	800177c <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	68d2      	ldr	r2, [r2, #12]
 8001744:	f022 0220 	bic.w	r2, r2, #32
 8001748:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	68d2      	ldr	r2, [r2, #12]
 8001754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001758:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	6952      	ldr	r2, [r2, #20]
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2220      	movs	r2, #32
 800176e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fe8f 	bl	8001496 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	e002      	b.n	8001782 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	e000      	b.n	8001782 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001780:	2302      	movs	r3, #2
  }
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	6912      	ldr	r2, [r2, #16]
 80017a2:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68d2      	ldr	r2, [r2, #12]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	4313      	orrs	r3, r2
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80017d2:	f023 030c 	bic.w	r3, r3, #12
 80017d6:	68f9      	ldr	r1, [r7, #12]
 80017d8:	430b      	orrs	r3, r1
 80017da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	6952      	ldr	r2, [r2, #20]
 80017e6:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6992      	ldr	r2, [r2, #24]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6f      	ldr	r2, [pc, #444]	; (80019b4 <UART_SetConfig+0x228>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d16b      	bne.n	80018d4 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681c      	ldr	r4, [r3, #0]
 8001800:	f7ff fc1e 	bl	8001040 <HAL_RCC_GetPCLK2Freq>
 8001804:	4602      	mov	r2, r0
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	009a      	lsls	r2, r3, #2
 800180e:	441a      	add	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	fbb2 f3f3 	udiv	r3, r2, r3
 800181a:	4a67      	ldr	r2, [pc, #412]	; (80019b8 <UART_SetConfig+0x22c>)
 800181c:	fba2 2303 	umull	r2, r3, r2, r3
 8001820:	095b      	lsrs	r3, r3, #5
 8001822:	011d      	lsls	r5, r3, #4
 8001824:	f7ff fc0c 	bl	8001040 <HAL_RCC_GetPCLK2Freq>
 8001828:	4602      	mov	r2, r0
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	009a      	lsls	r2, r3, #2
 8001832:	441a      	add	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	fbb2 f6f3 	udiv	r6, r2, r3
 800183e:	f7ff fbff 	bl	8001040 <HAL_RCC_GetPCLK2Freq>
 8001842:	4602      	mov	r2, r0
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	009a      	lsls	r2, r3, #2
 800184c:	441a      	add	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	fbb2 f3f3 	udiv	r3, r2, r3
 8001858:	4a57      	ldr	r2, [pc, #348]	; (80019b8 <UART_SetConfig+0x22c>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2264      	movs	r2, #100	; 0x64
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	1af3      	subs	r3, r6, r3
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	3332      	adds	r3, #50	; 0x32
 800186c:	4a52      	ldr	r2, [pc, #328]	; (80019b8 <UART_SetConfig+0x22c>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001878:	441d      	add	r5, r3
 800187a:	f7ff fbe1 	bl	8001040 <HAL_RCC_GetPCLK2Freq>
 800187e:	4602      	mov	r2, r0
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	009a      	lsls	r2, r3, #2
 8001888:	441a      	add	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	fbb2 f6f3 	udiv	r6, r2, r3
 8001894:	f7ff fbd4 	bl	8001040 <HAL_RCC_GetPCLK2Freq>
 8001898:	4602      	mov	r2, r0
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	009a      	lsls	r2, r3, #2
 80018a2:	441a      	add	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	4a42      	ldr	r2, [pc, #264]	; (80019b8 <UART_SetConfig+0x22c>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	095b      	lsrs	r3, r3, #5
 80018b6:	2264      	movs	r2, #100	; 0x64
 80018b8:	fb02 f303 	mul.w	r3, r2, r3
 80018bc:	1af3      	subs	r3, r6, r3
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	3332      	adds	r3, #50	; 0x32
 80018c2:	4a3d      	ldr	r2, [pc, #244]	; (80019b8 <UART_SetConfig+0x22c>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	095b      	lsrs	r3, r3, #5
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	442b      	add	r3, r5
 80018d0:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80018d2:	e06a      	b.n	80019aa <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681c      	ldr	r4, [r3, #0]
 80018d8:	f7ff fb9e 	bl	8001018 <HAL_RCC_GetPCLK1Freq>
 80018dc:	4602      	mov	r2, r0
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	009a      	lsls	r2, r3, #2
 80018e6:	441a      	add	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4a31      	ldr	r2, [pc, #196]	; (80019b8 <UART_SetConfig+0x22c>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	095b      	lsrs	r3, r3, #5
 80018fa:	011d      	lsls	r5, r3, #4
 80018fc:	f7ff fb8c 	bl	8001018 <HAL_RCC_GetPCLK1Freq>
 8001900:	4602      	mov	r2, r0
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	009a      	lsls	r2, r3, #2
 800190a:	441a      	add	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	fbb2 f6f3 	udiv	r6, r2, r3
 8001916:	f7ff fb7f 	bl	8001018 <HAL_RCC_GetPCLK1Freq>
 800191a:	4602      	mov	r2, r0
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	009a      	lsls	r2, r3, #2
 8001924:	441a      	add	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001930:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <UART_SetConfig+0x22c>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	2264      	movs	r2, #100	; 0x64
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	1af3      	subs	r3, r6, r3
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	3332      	adds	r3, #50	; 0x32
 8001944:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <UART_SetConfig+0x22c>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001950:	441d      	add	r5, r3
 8001952:	f7ff fb61 	bl	8001018 <HAL_RCC_GetPCLK1Freq>
 8001956:	4602      	mov	r2, r0
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	009a      	lsls	r2, r3, #2
 8001960:	441a      	add	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	fbb2 f6f3 	udiv	r6, r2, r3
 800196c:	f7ff fb54 	bl	8001018 <HAL_RCC_GetPCLK1Freq>
 8001970:	4602      	mov	r2, r0
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	009a      	lsls	r2, r3, #2
 800197a:	441a      	add	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <UART_SetConfig+0x22c>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	095b      	lsrs	r3, r3, #5
 800198e:	2264      	movs	r2, #100	; 0x64
 8001990:	fb02 f303 	mul.w	r3, r2, r3
 8001994:	1af3      	subs	r3, r6, r3
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	3332      	adds	r3, #50	; 0x32
 800199a:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <UART_SetConfig+0x22c>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	095b      	lsrs	r3, r3, #5
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	442b      	add	r3, r5
 80019a8:	60a3      	str	r3, [r4, #8]
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40013800 	.word	0x40013800
 80019b8:	51eb851f 	.word	0x51eb851f

080019bc <forward_Bluetooth>:
void stop();
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void forward_Bluetooth()
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MAIN_MOTOR_GPIO_Port, MAIN_MOTOR_Pin, 1);
 80019c0:	2201      	movs	r2, #1
 80019c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019c6:	481c      	ldr	r0, [pc, #112]	; (8001a38 <forward_Bluetooth+0x7c>)
 80019c8:	f7fe ff49 	bl	800085e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIRECTION_GPIO_Port, DIRECTION_Pin, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d2:	481a      	ldr	r0, [pc, #104]	; (8001a3c <forward_Bluetooth+0x80>)
 80019d4:	f7fe ff43 	bl	800085e <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin)
 80019d8:	e011      	b.n	80019fe <forward_Bluetooth+0x42>
			&& HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin)
			&& HAL_GPIO_ReadPin(DRILL_GPIO_Port, DRILL_Pin)
			&& flag==0)
	{
		  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);
 80019da:	2201      	movs	r2, #1
 80019dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e0:	4816      	ldr	r0, [pc, #88]	; (8001a3c <forward_Bluetooth+0x80>)
 80019e2:	f7fe ff3c 	bl	800085e <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7fe fbfa 	bl	80001e0 <HAL_Delay>
		  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f2:	4812      	ldr	r0, [pc, #72]	; (8001a3c <forward_Bluetooth+0x80>)
 80019f4:	f7fe ff33 	bl	800085e <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7fe fbf1 	bl	80001e0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin)
 80019fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a02:	480d      	ldr	r0, [pc, #52]	; (8001a38 <forward_Bluetooth+0x7c>)
 8001a04:	f7fe ff14 	bl	8000830 <HAL_GPIO_ReadPin>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d012      	beq.n	8001a34 <forward_Bluetooth+0x78>
			&& HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin)
 8001a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <forward_Bluetooth+0x7c>)
 8001a14:	f7fe ff0c 	bl	8000830 <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00a      	beq.n	8001a34 <forward_Bluetooth+0x78>
			&& HAL_GPIO_ReadPin(DRILL_GPIO_Port, DRILL_Pin)
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <forward_Bluetooth+0x7c>)
 8001a22:	f7fe ff05 	bl	8000830 <HAL_GPIO_ReadPin>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <forward_Bluetooth+0x78>
			&& flag==0)
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <forward_Bluetooth+0x84>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0d2      	beq.n	80019da <forward_Bluetooth+0x1e>
	}
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40010c00 	.word	0x40010c00
 8001a3c:	40011000 	.word	0x40011000
 8001a40:	20000020 	.word	0x20000020

08001a44 <backward_Bluetooth>:

void backward_Bluetooth()
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MAIN_MOTOR_GPIO_Port, MAIN_MOTOR_Pin, 1);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a4e:	4820      	ldr	r0, [pc, #128]	; (8001ad0 <backward_Bluetooth+0x8c>)
 8001a50:	f7fe ff05 	bl	800085e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIRECTION_GPIO_Port, DIRECTION_Pin, 1);
 8001a54:	2201      	movs	r2, #1
 8001a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a5a:	481e      	ldr	r0, [pc, #120]	; (8001ad4 <backward_Bluetooth+0x90>)
 8001a5c:	f7fe feff 	bl	800085e <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin)
 8001a60:	e011      	b.n	8001a86 <backward_Bluetooth+0x42>
			&& HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin)
			&& HAL_GPIO_ReadPin(DRILL_GPIO_Port, DRILL_Pin)
			&& flag==0
			&& !HAL_GPIO_ReadPin(END_SWITCH_GPIO_Port, END_SWITCH_Pin))
	{
		  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);
 8001a62:	2201      	movs	r2, #1
 8001a64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a68:	481a      	ldr	r0, [pc, #104]	; (8001ad4 <backward_Bluetooth+0x90>)
 8001a6a:	f7fe fef8 	bl	800085e <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f7fe fbb6 	bl	80001e0 <HAL_Delay>
		  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a7a:	4816      	ldr	r0, [pc, #88]	; (8001ad4 <backward_Bluetooth+0x90>)
 8001a7c:	f7fe feef 	bl	800085e <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7fe fbad 	bl	80001e0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin)
 8001a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a8a:	4811      	ldr	r0, [pc, #68]	; (8001ad0 <backward_Bluetooth+0x8c>)
 8001a8c:	f7fe fed0 	bl	8000830 <HAL_GPIO_ReadPin>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d019      	beq.n	8001aca <backward_Bluetooth+0x86>
			&& HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin)
 8001a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <backward_Bluetooth+0x8c>)
 8001a9c:	f7fe fec8 	bl	8000830 <HAL_GPIO_ReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d011      	beq.n	8001aca <backward_Bluetooth+0x86>
			&& HAL_GPIO_ReadPin(DRILL_GPIO_Port, DRILL_Pin)
 8001aa6:	2180      	movs	r1, #128	; 0x80
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <backward_Bluetooth+0x8c>)
 8001aaa:	f7fe fec1 	bl	8000830 <HAL_GPIO_ReadPin>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00a      	beq.n	8001aca <backward_Bluetooth+0x86>
			&& flag==0
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <backward_Bluetooth+0x94>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d106      	bne.n	8001aca <backward_Bluetooth+0x86>
			&& !HAL_GPIO_ReadPin(END_SWITCH_GPIO_Port, END_SWITCH_Pin))
 8001abc:	2101      	movs	r1, #1
 8001abe:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <backward_Bluetooth+0x8c>)
 8001ac0:	f7fe feb6 	bl	8000830 <HAL_GPIO_ReadPin>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0cb      	beq.n	8001a62 <backward_Bluetooth+0x1e>
	}
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40010c00 	.word	0x40010c00
 8001ad4:	40011000 	.word	0x40011000
 8001ad8:	20000020 	.word	0x20000020

08001adc <string_compare>:

uint8_t string_compare(char array1[], char array2[], uint16_t lenght)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<lenght;i++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	75bb      	strb	r3, [r7, #22]
 8001af2:	e012      	b.n	8001b1a <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8001af4:	7dbb      	ldrb	r3, [r7, #22]
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	781a      	ldrb	r2, [r3, #0]
 8001afc:	7dbb      	ldrb	r3, [r7, #22]
 8001afe:	68b9      	ldr	r1, [r7, #8]
 8001b00:	440b      	add	r3, r1
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d103      	bne.n	8001b10 <string_compare+0x34>
	   	  		  comVAR++;
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	75fb      	strb	r3, [r7, #23]
 8001b0e:	e001      	b.n	8001b14 <string_compare+0x38>
	   	  	  else comVAR=0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<lenght;i++)
 8001b14:	7dbb      	ldrb	r3, [r7, #22]
 8001b16:	3301      	adds	r3, #1
 8001b18:	75bb      	strb	r3, [r7, #22]
 8001b1a:	7dbb      	ldrb	r3, [r7, #22]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	88fa      	ldrh	r2, [r7, #6]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8e7      	bhi.n	8001af4 <string_compare+0x18>
	   	}
	 if (comVAR==lenght)
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	88fa      	ldrh	r2, [r7, #6]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d101      	bne.n	8001b32 <string_compare+0x56>
		 	return 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <string_compare+0x58>
	 else 	return 0;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
	...

08001b40 <Message_handler>:

void Message_handler()
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	flag=0;
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <Message_handler+0x94>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
	i=0;
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <Message_handler+0x98>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]

	if(string_compare(buffer, "forward", strlen("forward")))
 8001b50:	2207      	movs	r2, #7
 8001b52:	4922      	ldr	r1, [pc, #136]	; (8001bdc <Message_handler+0x9c>)
 8001b54:	4822      	ldr	r0, [pc, #136]	; (8001be0 <Message_handler+0xa0>)
 8001b56:	f7ff ffc1 	bl	8001adc <string_compare>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <Message_handler+0x30>
	{
		memset(buffer, 0, sizeof(buffer));
 8001b60:	2232      	movs	r2, #50	; 0x32
 8001b62:	2100      	movs	r1, #0
 8001b64:	481e      	ldr	r0, [pc, #120]	; (8001be0 <Message_handler+0xa0>)
 8001b66:	f000 fcbd 	bl	80024e4 <memset>
		forward_Bluetooth();
 8001b6a:	f7ff ff27 	bl	80019bc <forward_Bluetooth>
	if(string_compare(buffer, "stop", strlen("stop")))
	{
		memset(buffer, 0, sizeof(buffer));
		stop();
	}
}
 8001b6e:	e02e      	b.n	8001bce <Message_handler+0x8e>
	if(string_compare(buffer, "backward", strlen("backward")))
 8001b70:	2208      	movs	r2, #8
 8001b72:	491c      	ldr	r1, [pc, #112]	; (8001be4 <Message_handler+0xa4>)
 8001b74:	481a      	ldr	r0, [pc, #104]	; (8001be0 <Message_handler+0xa0>)
 8001b76:	f7ff ffb1 	bl	8001adc <string_compare>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <Message_handler+0x50>
		memset(buffer, 0, sizeof(buffer));
 8001b80:	2232      	movs	r2, #50	; 0x32
 8001b82:	2100      	movs	r1, #0
 8001b84:	4816      	ldr	r0, [pc, #88]	; (8001be0 <Message_handler+0xa0>)
 8001b86:	f000 fcad 	bl	80024e4 <memset>
		backward_Bluetooth();
 8001b8a:	f7ff ff5b 	bl	8001a44 <backward_Bluetooth>
}
 8001b8e:	e01e      	b.n	8001bce <Message_handler+0x8e>
	if(string_compare(buffer, "drill", strlen("drill")))
 8001b90:	2205      	movs	r2, #5
 8001b92:	4915      	ldr	r1, [pc, #84]	; (8001be8 <Message_handler+0xa8>)
 8001b94:	4812      	ldr	r0, [pc, #72]	; (8001be0 <Message_handler+0xa0>)
 8001b96:	f7ff ffa1 	bl	8001adc <string_compare>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <Message_handler+0x70>
		memset(buffer, 0, sizeof(buffer));
 8001ba0:	2232      	movs	r2, #50	; 0x32
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	480e      	ldr	r0, [pc, #56]	; (8001be0 <Message_handler+0xa0>)
 8001ba6:	f000 fc9d 	bl	80024e4 <memset>
		drill();
 8001baa:	f000 f981 	bl	8001eb0 <drill>
}
 8001bae:	e00e      	b.n	8001bce <Message_handler+0x8e>
	if(string_compare(buffer, "stop", strlen("stop")))
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	490e      	ldr	r1, [pc, #56]	; (8001bec <Message_handler+0xac>)
 8001bb4:	480a      	ldr	r0, [pc, #40]	; (8001be0 <Message_handler+0xa0>)
 8001bb6:	f7ff ff91 	bl	8001adc <string_compare>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <Message_handler+0x8e>
		memset(buffer, 0, sizeof(buffer));
 8001bc0:	2232      	movs	r2, #50	; 0x32
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4806      	ldr	r0, [pc, #24]	; (8001be0 <Message_handler+0xa0>)
 8001bc6:	f000 fc8d 	bl	80024e4 <memset>
		stop();
 8001bca:	f000 f811 	bl	8001bf0 <stop>
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000020 	.word	0x20000020
 8001bd8:	20000028 	.word	0x20000028
 8001bdc:	08002520 	.word	0x08002520
 8001be0:	2000002c 	.word	0x2000002c
 8001be4:	08002528 	.word	0x08002528
 8001be8:	08002534 	.word	0x08002534
 8001bec:	0800253c 	.word	0x0800253c

08001bf0 <stop>:

void stop()
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MAIN_MOTOR_GPIO_Port, MAIN_MOTOR_Pin, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bfa:	4826      	ldr	r0, [pc, #152]	; (8001c94 <stop+0xa4>)
 8001bfc:	f7fe fe2f 	bl	800085e <HAL_GPIO_WritePin>
	while(!HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin))
 8001c00:	e002      	b.n	8001c08 <stop+0x18>
		HAL_Delay(10);
 8001c02:	200a      	movs	r0, #10
 8001c04:	f7fe faec 	bl	80001e0 <HAL_Delay>
	while(!HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin))
 8001c08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c0c:	4821      	ldr	r0, [pc, #132]	; (8001c94 <stop+0xa4>)
 8001c0e:	f7fe fe0f 	bl	8000830 <HAL_GPIO_ReadPin>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f4      	beq.n	8001c02 <stop+0x12>
	while(!HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin))
 8001c18:	e002      	b.n	8001c20 <stop+0x30>
		HAL_Delay(10);
 8001c1a:	200a      	movs	r0, #10
 8001c1c:	f7fe fae0 	bl	80001e0 <HAL_Delay>
	while(!HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin))
 8001c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c24:	481b      	ldr	r0, [pc, #108]	; (8001c94 <stop+0xa4>)
 8001c26:	f7fe fe03 	bl	8000830 <HAL_GPIO_ReadPin>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f4      	beq.n	8001c1a <stop+0x2a>
	while(!HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin))
 8001c30:	e002      	b.n	8001c38 <stop+0x48>
		HAL_Delay(10);
 8001c32:	200a      	movs	r0, #10
 8001c34:	f7fe fad4 	bl	80001e0 <HAL_Delay>
	while(!HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin))
 8001c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c3c:	4815      	ldr	r0, [pc, #84]	; (8001c94 <stop+0xa4>)
 8001c3e:	f7fe fdf7 	bl	8000830 <HAL_GPIO_ReadPin>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f4      	beq.n	8001c32 <stop+0x42>
	while(!HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin))
 8001c48:	e002      	b.n	8001c50 <stop+0x60>
		HAL_Delay(10);
 8001c4a:	200a      	movs	r0, #10
 8001c4c:	f7fe fac8 	bl	80001e0 <HAL_Delay>
	while(!HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin))
 8001c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c54:	480f      	ldr	r0, [pc, #60]	; (8001c94 <stop+0xa4>)
 8001c56:	f7fe fdeb 	bl	8000830 <HAL_GPIO_ReadPin>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f4      	beq.n	8001c4a <stop+0x5a>
	while(!HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin))
 8001c60:	e002      	b.n	8001c68 <stop+0x78>
		HAL_Delay(10);
 8001c62:	200a      	movs	r0, #10
 8001c64:	f7fe fabc 	bl	80001e0 <HAL_Delay>
	while(!HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin))
 8001c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c6c:	4809      	ldr	r0, [pc, #36]	; (8001c94 <stop+0xa4>)
 8001c6e:	f7fe fddf 	bl	8000830 <HAL_GPIO_ReadPin>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f4      	beq.n	8001c62 <stop+0x72>
	while(!HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin))
 8001c78:	e002      	b.n	8001c80 <stop+0x90>
		HAL_Delay(10);
 8001c7a:	200a      	movs	r0, #10
 8001c7c:	f7fe fab0 	bl	80001e0 <HAL_Delay>
	while(!HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin))
 8001c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c84:	4803      	ldr	r0, [pc, #12]	; (8001c94 <stop+0xa4>)
 8001c86:	f7fe fdd3 	bl	8000830 <HAL_GPIO_ReadPin>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f4      	beq.n	8001c7a <stop+0x8a>
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40010c00 	.word	0x40010c00

08001c98 <backward>:

void backward()
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MAIN_MOTOR_GPIO_Port, MAIN_MOTOR_Pin, 1);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca4:	4821      	ldr	r0, [pc, #132]	; (8001d2c <backward+0x94>)
 8001ca6:	f7fe fdda 	bl	800085e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIRECTION_GPIO_Port, DIRECTION_Pin, 1);
 8001caa:	2201      	movs	r2, #1
 8001cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb0:	481f      	ldr	r0, [pc, #124]	; (8001d30 <backward+0x98>)
 8001cb2:	f7fe fdd4 	bl	800085e <HAL_GPIO_WritePin>
	while(!HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin)
 8001cb6:	e01a      	b.n	8001cee <backward+0x56>
			&& flag==0
		    && HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin)
			&& !HAL_GPIO_ReadPin(END_SWITCH_GPIO_Port, END_SWITCH_Pin))
	{
		for(uint16_t i=0; i<50; i++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	80fb      	strh	r3, [r7, #6]
 8001cbc:	e014      	b.n	8001ce8 <backward+0x50>
		{
		  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc4:	481a      	ldr	r0, [pc, #104]	; (8001d30 <backward+0x98>)
 8001cc6:	f7fe fdca 	bl	800085e <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7fe fa88 	bl	80001e0 <HAL_Delay>
		  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cd6:	4816      	ldr	r0, [pc, #88]	; (8001d30 <backward+0x98>)
 8001cd8:	f7fe fdc1 	bl	800085e <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7fe fa7f 	bl	80001e0 <HAL_Delay>
		for(uint16_t i=0; i<50; i++)
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	80fb      	strh	r3, [r7, #6]
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	2b31      	cmp	r3, #49	; 0x31
 8001cec:	d9e7      	bls.n	8001cbe <backward+0x26>
	while(!HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin)
 8001cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cf2:	480e      	ldr	r0, [pc, #56]	; (8001d2c <backward+0x94>)
 8001cf4:	f7fe fd9c 	bl	8000830 <HAL_GPIO_ReadPin>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d112      	bne.n	8001d24 <backward+0x8c>
			&& flag==0
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <backward+0x9c>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10e      	bne.n	8001d24 <backward+0x8c>
		    && HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin)
 8001d06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d0a:	4808      	ldr	r0, [pc, #32]	; (8001d2c <backward+0x94>)
 8001d0c:	f7fe fd90 	bl	8000830 <HAL_GPIO_ReadPin>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <backward+0x8c>
			&& !HAL_GPIO_ReadPin(END_SWITCH_GPIO_Port, END_SWITCH_Pin))
 8001d16:	2101      	movs	r1, #1
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <backward+0x94>)
 8001d1a:	f7fe fd89 	bl	8000830 <HAL_GPIO_ReadPin>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0c9      	beq.n	8001cb8 <backward+0x20>
		}
	}
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40010c00 	.word	0x40010c00
 8001d30:	40011000 	.word	0x40011000
 8001d34:	20000020 	.word	0x20000020

08001d38 <forward>:

void forward()
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MAIN_MOTOR_GPIO_Port, MAIN_MOTOR_Pin, 1);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d44:	481e      	ldr	r0, [pc, #120]	; (8001dc0 <forward+0x88>)
 8001d46:	f7fe fd8a 	bl	800085e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIRECTION_GPIO_Port, DIRECTION_Pin, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d50:	481c      	ldr	r0, [pc, #112]	; (8001dc4 <forward+0x8c>)
 8001d52:	f7fe fd84 	bl	800085e <HAL_GPIO_WritePin>
	while(!HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin)
 8001d56:	e01a      	b.n	8001d8e <forward+0x56>
			&& flag==0
			&& HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin))
	{
		for(uint16_t i=0; i<50; i++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	80fb      	strh	r3, [r7, #6]
 8001d5c:	e014      	b.n	8001d88 <forward+0x50>
		{
		  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d64:	4817      	ldr	r0, [pc, #92]	; (8001dc4 <forward+0x8c>)
 8001d66:	f7fe fd7a 	bl	800085e <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f7fe fa38 	bl	80001e0 <HAL_Delay>
		  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d76:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <forward+0x8c>)
 8001d78:	f7fe fd71 	bl	800085e <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7fe fa2f 	bl	80001e0 <HAL_Delay>
		for(uint16_t i=0; i<50; i++)
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	3301      	adds	r3, #1
 8001d86:	80fb      	strh	r3, [r7, #6]
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	2b31      	cmp	r3, #49	; 0x31
 8001d8c:	d9e7      	bls.n	8001d5e <forward+0x26>
	while(!HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin)
 8001d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d92:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <forward+0x88>)
 8001d94:	f7fe fd4c 	bl	8000830 <HAL_GPIO_ReadPin>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10b      	bne.n	8001db6 <forward+0x7e>
			&& flag==0
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <forward+0x90>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d107      	bne.n	8001db6 <forward+0x7e>
			&& HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin))
 8001da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <forward+0x88>)
 8001dac:	f7fe fd40 	bl	8000830 <HAL_GPIO_ReadPin>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1d0      	bne.n	8001d58 <forward+0x20>
		}
	}
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40010c00 	.word	0x40010c00
 8001dc4:	40011000 	.word	0x40011000
 8001dc8:	20000020 	.word	0x20000020

08001dcc <calibrate_axis>:

void calibrate_axis()
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(DIRECTION_GPIO_Port, DIRECTION_Pin, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd6:	4833      	ldr	r0, [pc, #204]	; (8001ea4 <calibrate_axis+0xd8>)
 8001dd8:	f7fe fd41 	bl	800085e <HAL_GPIO_WritePin>
	  while(HAL_GPIO_ReadPin(END_SWITCH_GPIO_Port, END_SWITCH_Pin)
 8001ddc:	e011      	b.n	8001e02 <calibrate_axis+0x36>
			  && flag==0
			  && HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin)
	  	  	  && HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin))
	  {
		  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);
 8001dde:	2201      	movs	r2, #1
 8001de0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001de4:	482f      	ldr	r0, [pc, #188]	; (8001ea4 <calibrate_axis+0xd8>)
 8001de6:	f7fe fd3a 	bl	800085e <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7fe f9f8 	bl	80001e0 <HAL_Delay>
		  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001df6:	482b      	ldr	r0, [pc, #172]	; (8001ea4 <calibrate_axis+0xd8>)
 8001df8:	f7fe fd31 	bl	800085e <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f7fe f9ef 	bl	80001e0 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(END_SWITCH_GPIO_Port, END_SWITCH_Pin)
 8001e02:	2101      	movs	r1, #1
 8001e04:	4828      	ldr	r0, [pc, #160]	; (8001ea8 <calibrate_axis+0xdc>)
 8001e06:	f7fe fd13 	bl	8000830 <HAL_GPIO_ReadPin>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <calibrate_axis+0x6c>
			  && flag==0
 8001e10:	4b26      	ldr	r3, [pc, #152]	; (8001eac <calibrate_axis+0xe0>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10f      	bne.n	8001e38 <calibrate_axis+0x6c>
			  && HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin)
 8001e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e1c:	4822      	ldr	r0, [pc, #136]	; (8001ea8 <calibrate_axis+0xdc>)
 8001e1e:	f7fe fd07 	bl	8000830 <HAL_GPIO_ReadPin>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <calibrate_axis+0x6c>
	  	  	  && HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin))
 8001e28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e2c:	481e      	ldr	r0, [pc, #120]	; (8001ea8 <calibrate_axis+0xdc>)
 8001e2e:	f7fe fcff 	bl	8000830 <HAL_GPIO_ReadPin>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1d2      	bne.n	8001dde <calibrate_axis+0x12>
	  }

	  HAL_GPIO_WritePin(DIRECTION_GPIO_Port, DIRECTION_Pin, 1);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e3e:	4819      	ldr	r0, [pc, #100]	; (8001ea4 <calibrate_axis+0xd8>)
 8001e40:	f7fe fd0d 	bl	800085e <HAL_GPIO_WritePin>
	  while(!HAL_GPIO_ReadPin(END_SWITCH_GPIO_Port, END_SWITCH_Pin)
 8001e44:	e011      	b.n	8001e6a <calibrate_axis+0x9e>
			  && flag==0
			  && HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin)
			  && HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin))
	  {
		  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e4c:	4815      	ldr	r0, [pc, #84]	; (8001ea4 <calibrate_axis+0xd8>)
 8001e4e:	f7fe fd06 	bl	800085e <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7fe f9c4 	bl	80001e0 <HAL_Delay>
		  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e5e:	4811      	ldr	r0, [pc, #68]	; (8001ea4 <calibrate_axis+0xd8>)
 8001e60:	f7fe fcfd 	bl	800085e <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f7fe f9bb 	bl	80001e0 <HAL_Delay>
	  while(!HAL_GPIO_ReadPin(END_SWITCH_GPIO_Port, END_SWITCH_Pin)
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	480e      	ldr	r0, [pc, #56]	; (8001ea8 <calibrate_axis+0xdc>)
 8001e6e:	f7fe fcdf 	bl	8000830 <HAL_GPIO_ReadPin>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d113      	bne.n	8001ea0 <calibrate_axis+0xd4>
			  && flag==0
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <calibrate_axis+0xe0>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10f      	bne.n	8001ea0 <calibrate_axis+0xd4>
			  && HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin)
 8001e80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e84:	4808      	ldr	r0, [pc, #32]	; (8001ea8 <calibrate_axis+0xdc>)
 8001e86:	f7fe fcd3 	bl	8000830 <HAL_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <calibrate_axis+0xd4>
			  && HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin))
 8001e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <calibrate_axis+0xdc>)
 8001e96:	f7fe fccb 	bl	8000830 <HAL_GPIO_ReadPin>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1d2      	bne.n	8001e46 <calibrate_axis+0x7a>
	  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40011000 	.word	0x40011000
 8001ea8:	40010c00 	.word	0x40010c00
 8001eac:	20000020 	.word	0x20000020

08001eb0 <drill>:

void drill()
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MAIN_MOTOR_GPIO_Port, MAIN_MOTOR_Pin, 1);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ebc:	4823      	ldr	r0, [pc, #140]	; (8001f4c <drill+0x9c>)
 8001ebe:	f7fe fcce 	bl	800085e <HAL_GPIO_WritePin>
	calibrate_axis();
 8001ec2:	f7ff ff83 	bl	8001dcc <calibrate_axis>

	HAL_GPIO_WritePin(DIRECTION_GPIO_Port, DIRECTION_Pin, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ecc:	4820      	ldr	r0, [pc, #128]	; (8001f50 <drill+0xa0>)
 8001ece:	f7fe fcc6 	bl	800085e <HAL_GPIO_WritePin>

	for(uint16_t i=0; i<6400; i++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	80fb      	strh	r3, [r7, #6]
 8001ed6:	e028      	b.n	8001f2a <drill+0x7a>
	{
	  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ede:	481c      	ldr	r0, [pc, #112]	; (8001f50 <drill+0xa0>)
 8001ee0:	f7fe fcbd 	bl	800085e <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7fe f97b 	bl	80001e0 <HAL_Delay>
	  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ef0:	4817      	ldr	r0, [pc, #92]	; (8001f50 <drill+0xa0>)
 8001ef2:	f7fe fcb4 	bl	800085e <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f7fe f972 	bl	80001e0 <HAL_Delay>
	  if(!HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin)
 8001efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f00:	4812      	ldr	r0, [pc, #72]	; (8001f4c <drill+0x9c>)
 8001f02:	f7fe fc95 	bl	8000830 <HAL_GPIO_ReadPin>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d012      	beq.n	8001f32 <drill+0x82>
			  || !HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin)
 8001f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f10:	480e      	ldr	r0, [pc, #56]	; (8001f4c <drill+0x9c>)
 8001f12:	f7fe fc8d 	bl	8000830 <HAL_GPIO_ReadPin>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <drill+0x82>
			  || flag==1)
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <drill+0xa4>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d006      	beq.n	8001f32 <drill+0x82>
	for(uint16_t i=0; i<6400; i++)
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	3301      	adds	r3, #1
 8001f28:	80fb      	strh	r3, [r7, #6]
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8001f30:	d3d2      	bcc.n	8001ed8 <drill+0x28>
		  break;
	}


	calibrate_axis();
 8001f32:	f7ff ff4b 	bl	8001dcc <calibrate_axis>
	HAL_GPIO_WritePin(MAIN_MOTOR_GPIO_Port, MAIN_MOTOR_Pin, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f3c:	4803      	ldr	r0, [pc, #12]	; (8001f4c <drill+0x9c>)
 8001f3e:	f7fe fc8e 	bl	800085e <HAL_GPIO_WritePin>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40010c00 	.word	0x40010c00
 8001f50:	40011000 	.word	0x40011000
 8001f54:	20000020 	.word	0x20000020

08001f58 <main>:

/* USER CODE END 0 */

int main(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f5c:	f7fe f8f6 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f60:	f000 f852 	bl	8002008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f64:	f000 f8d2 	bl	800210c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f68:	f000 f8a2 	bl	80020b0 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  calibrate_axis();
 8001f6c:	f7ff ff2e 	bl	8001dcc <calibrate_axis>

  memset(buffer, 0, sizeof(buffer));
 8001f70:	2232      	movs	r2, #50	; 0x32
 8001f72:	2100      	movs	r1, #0
 8001f74:	4820      	ldr	r0, [pc, #128]	; (8001ff8 <main+0xa0>)
 8001f76:	f000 fab5 	bl	80024e4 <memset>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <main+0xa4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <main+0xa4>)
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	68d2      	ldr	r2, [r2, #12]
 8001f84:	f042 0220 	orr.w	r2, r2, #32
 8001f88:	60da      	str	r2, [r3, #12]
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

	  if(!HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin))
 8001f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f8e:	481c      	ldr	r0, [pc, #112]	; (8002000 <main+0xa8>)
 8001f90:	f7fe fc4e 	bl	8000830 <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <main+0x46>
		  forward();
 8001f9a:	f7ff fecd 	bl	8001d38 <forward>

	  if(!HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin))
 8001f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa2:	4817      	ldr	r0, [pc, #92]	; (8002000 <main+0xa8>)
 8001fa4:	f7fe fc44 	bl	8000830 <HAL_GPIO_ReadPin>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <main+0x5a>
		  backward();
 8001fae:	f7ff fe73 	bl	8001c98 <backward>

	  if(!HAL_GPIO_ReadPin(DRILL_GPIO_Port, DRILL_Pin))
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	4812      	ldr	r0, [pc, #72]	; (8002000 <main+0xa8>)
 8001fb6:	f7fe fc3b 	bl	8000830 <HAL_GPIO_ReadPin>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <main+0x6c>
		  drill();
 8001fc0:	f7ff ff76 	bl	8001eb0 <drill>

	  if(!HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin) && !HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin))
 8001fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fc8:	480d      	ldr	r0, [pc, #52]	; (8002000 <main+0xa8>)
 8001fca:	f7fe fc31 	bl	8000830 <HAL_GPIO_ReadPin>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <main+0x90>
 8001fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd8:	4809      	ldr	r0, [pc, #36]	; (8002000 <main+0xa8>)
 8001fda:	f7fe fc29 	bl	8000830 <HAL_GPIO_ReadPin>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <main+0x90>
		  stop();
 8001fe4:	f7ff fe04 	bl	8001bf0 <stop>

	  if(flag==1)
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <main+0xac>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d1cc      	bne.n	8001f8a <main+0x32>
		  Message_handler();
 8001ff0:	f7ff fda6 	bl	8001b40 <Message_handler>
	  if(!HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin))
 8001ff4:	e7c9      	b.n	8001f8a <main+0x32>
 8001ff6:	bf00      	nop
 8001ff8:	2000002c 	.word	0x2000002c
 8001ffc:	20000060 	.word	0x20000060
 8002000:	40010c00 	.word	0x40010c00
 8002004:	20000020 	.word	0x20000020

08002008 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b090      	sub	sp, #64	; 0x40
 800200c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800200e:	2301      	movs	r3, #1
 8002010:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002016:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002018:	2300      	movs	r3, #0
 800201a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800201c:	2301      	movs	r3, #1
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002020:	2302      	movs	r3, #2
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002028:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800202a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800202e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002030:	f107 0318 	add.w	r3, r7, #24
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fc2b 	bl	8000890 <HAL_RCC_OscConfig>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d004      	beq.n	800204a <SystemClock_Config+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002040:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002044:	4818      	ldr	r0, [pc, #96]	; (80020a8 <SystemClock_Config+0xa0>)
 8002046:	f000 f8d1 	bl	80021ec <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800204a:	230f      	movs	r3, #15
 800204c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800204e:	2302      	movs	r3, #2
 8002050:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800205a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	2102      	movs	r1, #2
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fe77 	bl	8000d58 <HAL_RCC_ClockConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d004      	beq.n	800207a <SystemClock_Config+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002070:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8002074:	480c      	ldr	r0, [pc, #48]	; (80020a8 <SystemClock_Config+0xa0>)
 8002076:	f000 f8b9 	bl	80021ec <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800207a:	f7fe ffc3 	bl	8001004 <HAL_RCC_GetHCLKFreq>
 800207e:	4602      	mov	r2, r0
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <SystemClock_Config+0xa4>)
 8002082:	fba3 2302 	umull	r2, r3, r3, r2
 8002086:	099b      	lsrs	r3, r3, #6
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe f9c2 	bl	8000412 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800208e:	2004      	movs	r0, #4
 8002090:	f7fe f9cc 	bl	800042c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	f7fe f98f 	bl	80003be <HAL_NVIC_SetPriority>
}
 80020a0:	bf00      	nop
 80020a2:	3740      	adds	r7, #64	; 0x40
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	08002544 	.word	0x08002544
 80020ac:	10624dd3 	.word	0x10624dd3

080020b0 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <MX_USART2_UART_Init+0x50>)
 80020b6:	4a13      	ldr	r2, [pc, #76]	; (8002104 <MX_USART2_UART_Init+0x54>)
 80020b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <MX_USART2_UART_Init+0x50>)
 80020bc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80020c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <MX_USART2_UART_Init+0x50>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <MX_USART2_UART_Init+0x50>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <MX_USART2_UART_Init+0x50>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <MX_USART2_UART_Init+0x50>)
 80020d6:	220c      	movs	r2, #12
 80020d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <MX_USART2_UART_Init+0x50>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <MX_USART2_UART_Init+0x50>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020e6:	4806      	ldr	r0, [pc, #24]	; (8002100 <MX_USART2_UART_Init+0x50>)
 80020e8:	f7fe ffdc 	bl	80010a4 <HAL_UART_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d004      	beq.n	80020fc <MX_USART2_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80020f2:	f240 1173 	movw	r1, #371	; 0x173
 80020f6:	4804      	ldr	r0, [pc, #16]	; (8002108 <MX_USART2_UART_Init+0x58>)
 80020f8:	f000 f878 	bl	80021ec <_Error_Handler>
  }

}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000060 	.word	0x20000060
 8002104:	40004400 	.word	0x40004400
 8002108:	08002544 	.word	0x08002544

0800210c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002112:	4a33      	ldr	r2, [pc, #204]	; (80021e0 <MX_GPIO_Init+0xd4>)
 8002114:	4b32      	ldr	r3, [pc, #200]	; (80021e0 <MX_GPIO_Init+0xd4>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f043 0310 	orr.w	r3, r3, #16
 800211c:	6193      	str	r3, [r2, #24]
 800211e:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <MX_GPIO_Init+0xd4>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800212a:	4a2d      	ldr	r2, [pc, #180]	; (80021e0 <MX_GPIO_Init+0xd4>)
 800212c:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <MX_GPIO_Init+0xd4>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f043 0320 	orr.w	r3, r3, #32
 8002134:	6193      	str	r3, [r2, #24]
 8002136:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <MX_GPIO_Init+0xd4>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <MX_GPIO_Init+0xd4>)
 8002144:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <MX_GPIO_Init+0xd4>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	6193      	str	r3, [r2, #24]
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <MX_GPIO_Init+0xd4>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <MX_GPIO_Init+0xd4>)
 800215c:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <MX_GPIO_Init+0xd4>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f043 0308 	orr.w	r3, r3, #8
 8002164:	6193      	str	r3, [r2, #24]
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <MX_GPIO_Init+0xd4>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIRECTION_Pin|STEP_Pin, GPIO_PIN_RESET);
 8002172:	2200      	movs	r2, #0
 8002174:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002178:	481a      	ldr	r0, [pc, #104]	; (80021e4 <MX_GPIO_Init+0xd8>)
 800217a:	f7fe fb70 	bl	800085e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAIN_MOTOR_GPIO_Port, MAIN_MOTOR_Pin, GPIO_PIN_RESET);
 800217e:	2200      	movs	r2, #0
 8002180:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002184:	4818      	ldr	r0, [pc, #96]	; (80021e8 <MX_GPIO_Init+0xdc>)
 8002186:	f7fe fb6a 	bl	800085e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIRECTION_Pin STEP_Pin */
  GPIO_InitStruct.Pin = DIRECTION_Pin|STEP_Pin;
 800218a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800218e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002190:	2301      	movs	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002194:	2303      	movs	r3, #3
 8002196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	4619      	mov	r1, r3
 800219e:	4811      	ldr	r0, [pc, #68]	; (80021e4 <MX_GPIO_Init+0xd8>)
 80021a0:	f7fe f9e8 	bl	8000574 <HAL_GPIO_Init>

  /*Configure GPIO pins : END_SWITCH_Pin DRILL_Pin BACKWARD_Pin FORWARD_Pin */
  GPIO_InitStruct.Pin = END_SWITCH_Pin|DRILL_Pin|BACKWARD_Pin|FORWARD_Pin;
 80021a4:	f240 3381 	movw	r3, #897	; 0x381
 80021a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ae:	2301      	movs	r3, #1
 80021b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b2:	f107 0310 	add.w	r3, r7, #16
 80021b6:	4619      	mov	r1, r3
 80021b8:	480b      	ldr	r0, [pc, #44]	; (80021e8 <MX_GPIO_Init+0xdc>)
 80021ba:	f7fe f9db 	bl	8000574 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAIN_MOTOR_Pin */
  GPIO_InitStruct.Pin = MAIN_MOTOR_Pin;
 80021be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAIN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	4619      	mov	r1, r3
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <MX_GPIO_Init+0xdc>)
 80021d4:	f7fe f9ce 	bl	8000574 <HAL_GPIO_Init>

}
 80021d8:	bf00      	nop
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40011000 	.word	0x40011000
 80021e8:	40010c00 	.word	0x40010c00

080021ec <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 80021f6:	e7fe      	b.n	80021f6 <_Error_Handler+0xa>

080021f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021fe:	4a24      	ldr	r2, [pc, #144]	; (8002290 <HAL_MspInit+0x98>)
 8002200:	4b23      	ldr	r3, [pc, #140]	; (8002290 <HAL_MspInit+0x98>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6193      	str	r3, [r2, #24]
 800220a:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_MspInit+0x98>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002216:	2003      	movs	r0, #3
 8002218:	f7fe f8c6 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	f06f 000b 	mvn.w	r0, #11
 8002224:	f7fe f8cb 	bl	80003be <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2100      	movs	r1, #0
 800222c:	f06f 000a 	mvn.w	r0, #10
 8002230:	f7fe f8c5 	bl	80003be <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	f06f 0009 	mvn.w	r0, #9
 800223c:	f7fe f8bf 	bl	80003be <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	f06f 0004 	mvn.w	r0, #4
 8002248:	f7fe f8b9 	bl	80003be <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2100      	movs	r1, #0
 8002250:	f06f 0003 	mvn.w	r0, #3
 8002254:	f7fe f8b3 	bl	80003be <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	f06f 0001 	mvn.w	r0, #1
 8002260:	f7fe f8ad 	bl	80003be <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f7fe f8a7 	bl	80003be <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002270:	4a08      	ldr	r2, [pc, #32]	; (8002294 <HAL_MspInit+0x9c>)
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_MspInit+0x9c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800227a:	6053      	str	r3, [r2, #4]
 800227c:	4a05      	ldr	r2, [pc, #20]	; (8002294 <HAL_MspInit+0x9c>)
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_MspInit+0x9c>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002286:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	40010000 	.word	0x40010000

08002298 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a19      	ldr	r2, [pc, #100]	; (800230c <HAL_UART_MspInit+0x74>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d12b      	bne.n	8002302 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022aa:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_UART_MspInit+0x78>)
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_UART_MspInit+0x78>)
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_UART_MspInit+0x78>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022c2:	2304      	movs	r3, #4
 80022c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ce:	f107 0310 	add.w	r3, r7, #16
 80022d2:	4619      	mov	r1, r3
 80022d4:	480f      	ldr	r0, [pc, #60]	; (8002314 <HAL_UART_MspInit+0x7c>)
 80022d6:	f7fe f94d 	bl	8000574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022da:	2308      	movs	r3, #8
 80022dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 0310 	add.w	r3, r7, #16
 80022ea:	4619      	mov	r1, r3
 80022ec:	4809      	ldr	r0, [pc, #36]	; (8002314 <HAL_UART_MspInit+0x7c>)
 80022ee:	f7fe f941 	bl	8000574 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	2026      	movs	r0, #38	; 0x26
 80022f8:	f7fe f861 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022fc:	2026      	movs	r0, #38	; 0x26
 80022fe:	f7fe f87a 	bl	80003f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002302:	bf00      	nop
 8002304:	3720      	adds	r7, #32
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40004400 	.word	0x40004400
 8002310:	40021000 	.word	0x40021000
 8002314:	40010800 	.word	0x40010800

08002318 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <HardFault_Handler+0x4>

0800232a <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <MemManage_Handler+0x4>

08002330 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <BusFault_Handler+0x4>

08002336 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <UsageFault_Handler+0x4>

0800233c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002364:	f7fd ff24 	bl	80001b0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002368:	f7fe f87c 	bl	8000464 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}

08002370 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002376:	4818      	ldr	r0, [pc, #96]	; (80023d8 <USART2_IRQHandler+0x68>)
 8002378:	f7fe ff88 	bl	800128c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
char c;
	HAL_UART_Receive(&huart2, (uint8_t*) &c, 1, 5);
 800237c:	1df9      	adds	r1, r7, #7
 800237e:	2305      	movs	r3, #5
 8002380:	2201      	movs	r2, #1
 8002382:	4815      	ldr	r0, [pc, #84]	; (80023d8 <USART2_IRQHandler+0x68>)
 8002384:	f7fe fedb 	bl	800113e <HAL_UART_Receive>

	if(c!='\n')
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	2b0a      	cmp	r3, #10
 800238c:	d009      	beq.n	80023a2 <USART2_IRQHandler+0x32>
		buffer[i++]=c;
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <USART2_IRQHandler+0x6c>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	b2d1      	uxtb	r1, r2
 8002396:	4a11      	ldr	r2, [pc, #68]	; (80023dc <USART2_IRQHandler+0x6c>)
 8002398:	7011      	strb	r1, [r2, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	79f9      	ldrb	r1, [r7, #7]
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <USART2_IRQHandler+0x70>)
 80023a0:	5499      	strb	r1, [r3, r2]
  //HAL_UART_Receive(&huart2, (uint8_t*) &buffer[i++], 1, 5);

	if(i>=4 && c=='\n')
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <USART2_IRQHandler+0x6c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d905      	bls.n	80023b6 <USART2_IRQHandler+0x46>
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	2b0a      	cmp	r3, #10
 80023ae:	d102      	bne.n	80023b6 <USART2_IRQHandler+0x46>
		flag=1;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <USART2_IRQHandler+0x74>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]

	if(i>20)
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <USART2_IRQHandler+0x6c>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b14      	cmp	r3, #20
 80023bc:	d907      	bls.n	80023ce <USART2_IRQHandler+0x5e>
	{
		i=0;
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <USART2_IRQHandler+0x6c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
		memset(buffer, 0, sizeof(buffer));
 80023c4:	2232      	movs	r2, #50	; 0x32
 80023c6:	2100      	movs	r1, #0
 80023c8:	4805      	ldr	r0, [pc, #20]	; (80023e0 <USART2_IRQHandler+0x70>)
 80023ca:	f000 f88b 	bl	80024e4 <memset>
	}

  /* USER CODE END USART2_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000060 	.word	0x20000060
 80023dc:	20000028 	.word	0x20000028
 80023e0:	2000002c 	.word	0x2000002c
 80023e4:	20000020 	.word	0x20000020

080023e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80023ec:	4a15      	ldr	r2, [pc, #84]	; (8002444 <SystemInit+0x5c>)
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <SystemInit+0x5c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80023f8:	4912      	ldr	r1, [pc, #72]	; (8002444 <SystemInit+0x5c>)
 80023fa:	4b12      	ldr	r3, [pc, #72]	; (8002444 <SystemInit+0x5c>)
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <SystemInit+0x60>)
 8002400:	4013      	ands	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002404:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <SystemInit+0x5c>)
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <SystemInit+0x5c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800240e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002412:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002414:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <SystemInit+0x5c>)
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <SystemInit+0x5c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002420:	4a08      	ldr	r2, [pc, #32]	; (8002444 <SystemInit+0x5c>)
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <SystemInit+0x5c>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800242a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <SystemInit+0x5c>)
 800242e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002432:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <SystemInit+0x64>)
 8002436:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800243a:	609a      	str	r2, [r3, #8]
#endif 
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	40021000 	.word	0x40021000
 8002448:	f8ff0000 	.word	0xf8ff0000
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002450:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002452:	e003      	b.n	800245c <LoopCopyDataInit>

08002454 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002456:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002458:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800245a:	3104      	adds	r1, #4

0800245c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800245c:	480a      	ldr	r0, [pc, #40]	; (8002488 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002460:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002462:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002464:	d3f6      	bcc.n	8002454 <CopyDataInit>
  ldr r2, =_sbss
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002468:	e002      	b.n	8002470 <LoopFillZerobss>

0800246a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800246c:	f842 3b04 	str.w	r3, [r2], #4

08002470 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002472:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002474:	d3f9      	bcc.n	800246a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002476:	f7ff ffb7 	bl	80023e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247a:	f000 f80f 	bl	800249c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800247e:	f7ff fd6b 	bl	8001f58 <main>
  bx lr
 8002482:	4770      	bx	lr
  ldr r3, =_sidata
 8002484:	08002574 	.word	0x08002574
  ldr r0, =_sdata
 8002488:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800248c:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8002490:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8002494:	200000a0 	.word	0x200000a0

08002498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC1_2_IRQHandler>
	...

0800249c <__libc_init_array>:
 800249c:	b570      	push	{r4, r5, r6, lr}
 800249e:	2500      	movs	r5, #0
 80024a0:	4e0c      	ldr	r6, [pc, #48]	; (80024d4 <__libc_init_array+0x38>)
 80024a2:	4c0d      	ldr	r4, [pc, #52]	; (80024d8 <__libc_init_array+0x3c>)
 80024a4:	1ba4      	subs	r4, r4, r6
 80024a6:	10a4      	asrs	r4, r4, #2
 80024a8:	42a5      	cmp	r5, r4
 80024aa:	d109      	bne.n	80024c0 <__libc_init_array+0x24>
 80024ac:	f000 f822 	bl	80024f4 <_init>
 80024b0:	2500      	movs	r5, #0
 80024b2:	4e0a      	ldr	r6, [pc, #40]	; (80024dc <__libc_init_array+0x40>)
 80024b4:	4c0a      	ldr	r4, [pc, #40]	; (80024e0 <__libc_init_array+0x44>)
 80024b6:	1ba4      	subs	r4, r4, r6
 80024b8:	10a4      	asrs	r4, r4, #2
 80024ba:	42a5      	cmp	r5, r4
 80024bc:	d105      	bne.n	80024ca <__libc_init_array+0x2e>
 80024be:	bd70      	pop	{r4, r5, r6, pc}
 80024c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024c4:	4798      	blx	r3
 80024c6:	3501      	adds	r5, #1
 80024c8:	e7ee      	b.n	80024a8 <__libc_init_array+0xc>
 80024ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024ce:	4798      	blx	r3
 80024d0:	3501      	adds	r5, #1
 80024d2:	e7f2      	b.n	80024ba <__libc_init_array+0x1e>
 80024d4:	0800256c 	.word	0x0800256c
 80024d8:	0800256c 	.word	0x0800256c
 80024dc:	0800256c 	.word	0x0800256c
 80024e0:	08002570 	.word	0x08002570

080024e4 <memset>:
 80024e4:	4603      	mov	r3, r0
 80024e6:	4402      	add	r2, r0
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d100      	bne.n	80024ee <memset+0xa>
 80024ec:	4770      	bx	lr
 80024ee:	f803 1b01 	strb.w	r1, [r3], #1
 80024f2:	e7f9      	b.n	80024e8 <memset+0x4>

080024f4 <_init>:
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	bf00      	nop
 80024f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024fa:	bc08      	pop	{r3}
 80024fc:	469e      	mov	lr, r3
 80024fe:	4770      	bx	lr

08002500 <_fini>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	bf00      	nop
 8002504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002506:	bc08      	pop	{r3}
 8002508:	469e      	mov	lr, r3
 800250a:	4770      	bx	lr
